version: 2.1
orbs:
  jq: "circleci/jq@2.2.0"
  shellcheck: "circleci/shellcheck@2.2.0"
  slack: "circleci/slack@4.3.3"

executors:
  standard:
    parameters:
      image:
        description: "docker image"
        default: "cimg/base:stable-18.04"
        type: string
      class:
        description: "resource class"
        default: "small"
        type: string
    docker:
    - image: <<parameters.image>>
      auth:
        username: $DOCKER_LOGIN
        password: $DOCKER_PASSWORD
    resource_class: <<parameters.class>>
    environment:
      LC_ALL: "en_US.UTF-8"

commands:
  workattach:
    steps:
      - attach_workspace:
          at: /tmp/workspace
  slack_fail:
    steps:
      - slack/notify:
          # XXX branch_pattern: "master,gh-pages"
          event: fail
          custom: |
            { "blocks": [
                { "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "FAIL ${CIRCLE_USERNAME} > ${CIRCLE_JOB} <${CIRCLE_BUILD_URL}|more...>" }}]}
  srd_yes:
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: '20.10.6'
  srd_no:
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
          version: '20.10.6'
  restore_bin:
    description: "Restore the build binaries"
    steps:
      - workattach
      - srd_no
      - run: |
          mkdir -p ~/.local
          ln -sf /tmp/workspace/bin ~/.local/bin
          ls ~/.local/bin/*
          zcat /tmp/workspace/docker/runner.tar.gz | docker load
          source ./VERSION
          docker tag reachsh/runner:latest reachsh/runner:${VERSION}
          docker tag reachsh/runner:latest reachsh/runner:${MAJOR}.${MINOR}
          docker tag reachsh/runner:latest reachsh/runner:${MAJOR}
  stack_deps:
    description: "Install stack dependencies"
    steps:
      - run: |
          # Install stack deps
          sudo apt update && sudo apt install \
            g++ \
            gcc \
            git \
            gnupg \
            libc6-dev \
            libffi-dev \
            libgmp-dev \
            libtinfo-dev \
            make \
            netbase \
            xz-utils \
            zlib1g-dev
          # Install stack
          if ! [ -f ~/.local/bin/stack ] ; then
            curl -sSL https://get.haskellstack.org/ | sh -s - -d ~/.local/bin
          fi
          # Reset locale
          sudo sh -c 'echo "LC_ALL=en_US.UTF-8" >> /etc/environment \
                    && echo "en_US.UTF-8 UTF-8"  >> /etc/locale.gen \
                    && echo "LANG=en_US.UTF-8"    > /etc/locale.conf \
                    && locale-gen en_US.UTF-8'
          # Setup package
          (cd hs && make package.yaml)
      - restore_cache:
         keys:
          - "hs-3-{{ checksum \"hs/stack.yaml\" }}-{{ checksum \"hs/package.yaml\" }}"
      - run: |
          # Install deps
          (cd hs && make hs-deps)
      - save_cache:
          key: "hs-3-{{ checksum \"hs/stack.yaml\" }}-{{ checksum \"hs/package.yaml\" }}"
          paths:
          - ~/.stack
          - "hs/.stack-work"

jobs:
  "docs-render":
    executor: standard
    steps:
    - checkout
    - run: |
        sudo add-apt-repository -y ppa:plt/racket \
          && sudo apt update \
          && sudo apt install -y --no-install-recommends \
            libcairo2 \
            libfontconfig1 \
            libjpeg62 \
            libpangocairo-1.0 \
            racket \
            python3-setuptools
        (cd pygments && sudo make install)
        (cd docs-src && make render)
        mkdir -p /tmp/workspace/
        cp -fr docs /tmp/workspace/
    - persist_to_workspace:
        root: /tmp/workspace/
        paths:
          - docs
    - slack_fail
  "docs-deploy":
    executor: standard
    steps:
    - checkout
    - workattach
    - add_ssh_keys:
        fingerprints:
        - "83:23:9c:21:6a:74:61:48:20:da:a3:45:79:89:3e:86"
    - run: |
        git config user.email "devbot@reach.sh"
        git config user.name "reachdevbot"
        git fetch origin gh-pages
        git checkout gh-pages
        git pull origin gh-pages
        git rm -r .
        cp -r /tmp/workspace/docs/* .
        [ -f index.html ] || exit 1
        git add .
        # https://stackoverflow.com/questions/8123674/how-to-git-commit-nothing-without-an-error
        git diff-index --quiet HEAD || git commit -m "[ci skip] docs for ${CIRCLE_SHA1}"
        git push origin gh-pages
    - slack_fail
  "sh-check":
    executor: standard
    steps:
    - checkout
    - shellcheck/install
    - run: |
        make sh-lint
    - slack_fail
  "build":
    executor:
      name: standard
      class: "medium"
    steps:
    - checkout
    - run: |
        mkdir -p ~/.local /tmp/workspace/bin
        ln -sf /tmp/workspace/bin ~/.local/bin
        # Install mo
        curl -sSLo ~/.local/bin/mo https://git.io/get-mo
        # Install solc
        curl -sSLo ~/.local/bin/solc \
          https://github.com/ethereum/solidity/releases/download/v0.8.2/solc-static-linux
        # Install Z3
        curl -sSLo /tmp/z3.zip \
              https://github.com/Z3Prover/z3/releases/download/z3-4.8.10/z3-4.8.10-x64-ubuntu-18.04.zip \
          && unzip -p /tmp/z3.zip z3-4.8.10-x64-ubuntu-18.04/bin/z3 \
            | cat > ~/.local/bin/z3
        chmod +x ~/.local/bin/*
    - stack_deps
    - run: |
        (cd hs && make hs-clean)
        (cd hs && make hs-build)
        (cd hs && stack install)
    # XXX We could actually fork here and do hs-test and hs-check
    - srd_yes
    - run: |
        (cd js && make build)
        (cd js/stdlib && make check)
        mkdir -p /tmp/workspace/docker
        docker save reachsh/runner:latest | gzip > /tmp/workspace/docker/runner.tar.gz
    - persist_to_workspace:
        root: /tmp/workspace/
        paths:
          - bin
          - docker
    - slack_fail
  "hs-test":
    executor:
      name: standard
      class: "medium"
    steps:
    - checkout
    - restore_bin
    - stack_deps
    - run: |
        (cd hs && make hs-test-xml)
    - store_test_results:
        path: "hs/test-reports"
    - slack_fail
  "hs-check":
    executor: standard
    steps:
    - checkout
    - restore_bin
    - stack_deps
    - run: |
        (cd hs && make hs-check)
    - store_artifacts:
        path: hs/stan.html
    - slack_fail
  "js-test":
    executor: standard
    steps:
    - checkout
    - restore_bin
    - run: |
        (cd js/dockerized-tests && make clean-test && sbin/test.sh)
    - slack_fail
  "example":
    parameters:
      which:
        description: "which example directory"
        type: string
    executor: standard
    steps:
    - checkout
    - restore_bin
    - run: |
        cd examples && ../.circleci/example.sh <<parameters.which>>
    - run:
        when: always
        command: |
          if [ ! -f /tmp/status ] ; then
            echo 'export STATUS="fail"' > /tmp/status
          fi
          mkdir -p /tmp/workspace/record
          mv /tmp/status /tmp/workspace/record/${CIRCLE_JOB}
    - persist_to_workspace:
        root: /tmp/workspace
        paths:
          - record
  "example-sink":
    executor: standard
    steps:
    - checkout
    - workattach
    - run: |
        ./.circleci/record.sh >> $BASH_ENV
    - slack/notify:
        event: always
        # XXX branch_pattern: "master,gh-pages"
        custom: |
          { "blocks": [
              { "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${RECORD_MESSAGE}" }}]}

workflows:
  docs:
    jobs:
    - "docs-render"
    - "docs-deploy":
        filters:
          branches:
            only: master
        requires:
        - "docs-render"
  buildless:
    jobs:
    - "sh-check"
  build:
    jobs:
    - "build"
    - "hs-test":
        requires:
          - "build"
    - "hs-check":
        requires:
          - "build"
    - "js-test":
        requires:
          - "build"
    # Sink and examples follow
