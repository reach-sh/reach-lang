version: 2.1
orbs:
  jq: "circleci/jq@2.2.0"
  shellcheck: "circleci/shellcheck@2.2.0"
  slack: "circleci/slack@4.3.3"

executors:
  fake:
    parameters:
      class:
        description: "resource class"
        default: "small"
        type: string
      dlc:
        description: "docker layer caching (ignored)"
        default: false
        type: boolean
    docker:
    - image: "cimg/base:stable"
      auth:
        username: $DOCKER_LOGIN
        password: $DOCKER_PASSWORD
    resource_class: <<parameters.class>>
    environment:
      LC_ALL: "en_US.UTF-8"
  real:
    parameters:
      dlc:
        description: "docker layer caching"
        default: false
        type: boolean
    machine:
      image: "ubuntu-2004:202107-02"
      docker_layer_caching: << parameters.dlc >>
    resource_class: "medium"
    environment:
      LC_ALL: "en_US.UTF-8"
      PATH: "/home/circleci/.local/bin:/usr/local/bin:/usr/bin:/bin:/sbin"

commands:
  workattach:
    steps:
      - attach_workspace:
          at: /tmp/workspace
  slack_fail:
    steps:
      - slack/notify:
          # NOTE: We used to do
          # branch_pattern: "master,gh-pages"
          # But, I am disabling it on purpose
          event: fail
          # XXX make circle_branch a link
          custom: |
            { "blocks": [
                { "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*FAIL* ${CIRCLE_USERNAME}/${CIRCLE_BRANCH} > ${CIRCLE_JOB} <${CIRCLE_BUILD_URL}|more...>" }}]}
  srd_yes:
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: '20.10.6'
  srd_no:
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
          version: '20.10.6'
  and_restore_docker:
    description: "Restore the build Docker images"
    parameters:
      deps:
        description: "which images"
        type: string
    steps:
      - run: |
          source ./VERSION

          for IMG in <<parameters.deps>> ; do
            zcat /tmp/workspace/docker-${IMG}/${IMG}.tar.gz | docker load
            docker tag reachsh/${IMG}:latest reachsh/${IMG}:${VERSION}
            docker tag reachsh/${IMG}:latest reachsh/${IMG}:${MAJOR}.${MINOR}
            docker tag reachsh/${IMG}:latest reachsh/${IMG}:${MAJOR}
          done

jobs:
  "docs-render":
    executor: fake
    steps:
    - checkout
    # We don't mind not caching, because it doesn't take that long and we don't
    # want to steal a volume from the main build
    - srd_no
    - run: |
        (cd docs && make build)
        mkdir -p /tmp/workspace/search
        cp -fr docs/build /tmp/workspace/docs
        cp -f docs/search/index.json /tmp/workspace/search
    - persist_to_workspace:
        root: /tmp/workspace/
        paths:
          - docs
          - search
    - slack_fail
  "docs-deploy":
    executor: fake
    steps:
    - checkout
    - workattach
    - srd_no
    - run: |
        cp /tmp/workspace/search/* ./docs/search/
        (cd docs && make update-search)
    - add_ssh_keys:
        fingerprints:
        - "83:23:9c:21:6a:74:61:48:20:da:a3:45:79:89:3e:86"
    - run: |
        git config user.email "devbot@reach.sh"
        git config user.name "reachdevbot"
        git fetch origin gh-pages
        git checkout gh-pages
        git pull origin gh-pages
        git rm -r .
        cp -r /tmp/workspace/docs/* .
        [ -f index.html ] || exit 1
        git add .
        # https://stackoverflow.com/questions/8123674/how-to-git-commit-nothing-without-an-error
        git diff-index --quiet HEAD || (git commit -m "[ci skip] docs for ${CIRCLE_SHA1}" && touch .did_change)
        git push origin gh-pages
    - slack_fail
    - run: |
        if [ -f .did_change ]; then
          git diff --exit-code HEAD~ changelog/page.html
        fi
    - slack/notify:
        event: fail
        channel: 'CMY2TF38D' # general
        # (CMY3E5B3J = reach-lang)
        custom: |
          {
            "blocks": [{
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "<https://docs.reach.sh/changelog/|Changelog> has changed!"
              }
            }]
          }

  "sh-check":
    executor: fake
    steps:
    - checkout
    - shellcheck/install
    - run: |
        make sh-lint
    - slack_fail
  "hs-test":
    executor: real
    steps:
    - checkout
    - workattach
    - and_restore_docker:
        deps: "haskell-build-artifacts"
    - run:
        command: |
          mkdir -p hs/test-reports
          docker run --rm -v $(pwd)/examples:/examples/ -v $(pwd)/docs/dev:/docs/dev/ -v $(pwd)/hs/t:/build/t -v $(pwd)/hs/test-reports:/build/test-reports -ti reachsh/haskell-build-artifacts make docker-test-xml
        no_output_timeout: 30m
    - store_test_results:
        path: "hs/test-reports"
    - slack_fail
  "hs-check":
    executor: fake
    steps:
    - checkout
    - srd_no
    - workattach
    - and_restore_docker:
        deps: "haskell-build-artifacts"
    - run: |
        docker run --rm -ti reachsh/haskell-build-artifacts make docker-check
    - slack_fail
  "build-image":
    parameters:
      image:
        description: "which image"
        type: string
      exec:
        description: "which executor"
        type: string
      deps:
        description: "docker dependencies"
        type: string
    executor:
      name: <<parameters.exec>>
      dlc: true
    steps:
    - checkout
    - when:
        condition:
          equal: [ fake, << parameters.exec >> ]
        steps:
          - srd_yes
    - workattach
    - and_restore_docker:
        deps: <<parameters.deps>>
    - run: |
        IMAGE="<<parameters.image>>"
        mkdir -p "/tmp/workspace/docker-${IMAGE}"
        cd .circleci && ./image.sh "${IMAGE}"
        echo "docker save reachsh/${IMAGE}:latest..."
        docker save "reachsh/${IMAGE}:latest" | gzip > "/tmp/workspace/docker-${IMAGE}/${IMAGE}".tar.gz
    - persist_to_workspace:
        root: /tmp/workspace/
        paths:
          - docker-<<parameters.image>>
    - slack_fail
  "examples":
    parameters:
      connector:
        description: "which connector"
        type: string
      size:
        description: "parallel size"
        type: string
      rank:
        description: "parallel rank"
        type: string
      deps:
        description: "docker dependencies"
        type: string
    executor: real
    steps:
    - checkout
    - workattach
    - and_restore_docker:
        deps: <<parameters.deps>>
    - run: |
        mkdir -p /tmp/workspace/artifacts /tmp/workspace/record /tmp/artifacts
    - run:
        command: |
          cd .circleci && ./example.sh <<parameters.connector>> <<parameters.size>> <<parameters.rank>>
        no_output_timeout: 20m
    - store_artifacts:
        path: /tmp/artifacts
    - run: |
        CIRCLE_ARTIFACTS_URL=$(curl -X GET "https://circleci.com/api/v2/project/github/reach-sh/reach-lang/${CIRCLE_BUILD_NUM}/artifacts" \
          -H "Accept: application/json" \
          -u "${CIRCLE_API_TOKEN}:")
        echo "${CIRCLE_ARTIFACTS_URL}" > /tmp/workspace/artifacts/<<parameters.connector>>.<<parameters.rank>>
    - persist_to_workspace:
        root: /tmp/workspace
        paths:
          - artifacts
          - record
  "examples-sink":
    executor: fake
    steps:
    - checkout
    - workattach
    - run: |
        ./.circleci/record.py >> $BASH_ENV
    - run:
        when: always
        command: |
          echo "${RECORD_MESSAGE}"
    - slack/notify:
        event: always
        # NOTE: We used to do
        # branch_pattern: "master,gh-pages"
        # But, I am disabling it on purpose
        custom: |
          { "blocks": [
              { "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${RECORD_MESSAGE}" }}]}
  "build-sink":
    executor: fake
    steps:
    - run: |
        echo Go team!

workflows:
  docs:
    jobs:
    - "docs-render"
    - "docs-deploy":
       filters:
         branches:
           only: master
       requires:
       - "docs-render"
  buildless:
    jobs:
    - "sh-check"
  build:
    jobs:
    - "hs-test":
        requires:
          - "build-haskell-build-artifacts"
    - "hs-check":
        requires:
          - "build-haskell-build-artifacts"
    # Sink and examples follow
