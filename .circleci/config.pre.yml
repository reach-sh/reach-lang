version: 2.1
orbs:
  jq: "circleci/jq@2.2.0"
  shellcheck: "circleci/shellcheck@2.2.0"
  slack: "circleci/slack@4.3.3"

executors:
  fake:
    parameters:
      class:
        description: "resource class"
        default: "small"
        type: string
    docker:
    - image: "cimg/base:stable"
      auth:
        username: $DOCKER_LOGIN
        password: $DOCKER_PASSWORD
    resource_class: <<parameters.class>>
    environment:
      LC_ALL: "en_US.UTF-8"
  real:
    machine:
      image: "ubuntu-2004:202107-02"
    resource_class: "medium"
    environment:
      LC_ALL: "en_US.UTF-8"
      PATH: "/home/circleci/.local/bin:/usr/local/bin:/usr/bin:/bin:/sbin"

commands:
  workattach:
    steps:
      - attach_workspace:
          at: /tmp/workspace
  slack_fail:
    steps:
      - slack/notify:
          # NOTE: We used to do
          # branch_pattern: "master,gh-pages"
          # But, I am disabling it on purpose
          event: fail
          # XXX make circle_branch a link
          custom: |
            { "blocks": [
                { "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*FAIL* ${CIRCLE_USERNAME}/${CIRCLE_BRANCH} > ${CIRCLE_JOB} <${CIRCLE_BUILD_URL}|more...>" }}]}
  srd_yes:
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: '20.10.6'
  srd_no:
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
          version: '20.10.6'
  restore_bin:
    description: "Restore the build binaries"
    steps:
      - workattach
      - run: |
          mkdir -p ~/.local
          ln -sf /tmp/workspace/bin ~/.local/bin
          ls ~/.local/bin/*
  and_restore_docker:
    description: "Restore the build Docker images"
    steps:
      - run: |
          source ./VERSION

          for IMG in runner rpc-server reach reach-cli ; do
            zcat /tmp/workspace/docker/${IMG}.tar.gz | docker load
            docker tag reachsh/${IMG}:latest reachsh/${IMG}:${VERSION}
            docker tag reachsh/${IMG}:latest reachsh/${IMG}:${MAJOR}.${MINOR}
            docker tag reachsh/${IMG}:latest reachsh/${IMG}:${MAJOR}
          done
  stack_deps:
    description: "Install stack dependencies"
    steps:
      - run: |
          # Install stack deps
          sudo apt update && sudo apt install \
            g++ \
            gcc \
            git \
            gnupg \
            libc6-dev \
            libffi-dev \
            libgmp-dev \
            libtinfo-dev \
            make \
            netbase \
            xz-utils \
            zlib1g-dev
          # Install stack
          if ! [ -f ~/.local/bin/stack ] ; then
            curl -sSL https://get.haskellstack.org/ | sh -s - -d ~/.local/bin
          fi
          # Reset locale
          sudo sh -c 'echo "LC_ALL=en_US.UTF-8" >> /etc/environment \
                   && echo "en_US.UTF-8 UTF-8"  >> /etc/locale.gen \
                   && echo "LANG=en_US.UTF-8"    > /etc/locale.conf \
                   && locale-gen en_US.UTF-8'
          # Setup package
          (cd hs && make package.yaml)
      - restore_cache:
         keys:
          - "hs-3-{{ checksum \"hs/stack.yaml\" }}-{{ checksum \"hs/package.yaml\" }}"
      - run: |
          # Install deps
          (cd hs && make hs-deps)
      - save_cache:
          key: "hs-3-{{ checksum \"hs/stack.yaml\" }}-{{ checksum \"hs/package.yaml\" }}"
          paths:
          - ~/.stack
          - "hs/.stack-work"

jobs:
  "docs-render":
    executor: fake
    steps:
    - checkout
    - run: |
        sudo add-apt-repository -y ppa:plt/racket \
            && sudo apt update \
            && sudo apt install -y --no-install-recommends \
              libcairo2 \
              libfontconfig1 \
              libjpeg62 \
              libpangocairo-1.0-0 \
              racket \
              python3-setuptools
        (cd pygments && sudo make install)
        (cd docs-src && make render)
        mkdir -p /tmp/workspace/
        cp -fr docs /tmp/workspace/
    - persist_to_workspace:
        root: /tmp/workspace/
        paths:
          - docs
    - slack_fail
  "docs-deploy":
    executor: fake
    steps:
    - checkout
    - workattach
    - add_ssh_keys:
        fingerprints:
        - "83:23:9c:21:6a:74:61:48:20:da:a3:45:79:89:3e:86"
    - run: |
        git config user.email "devbot@reach.sh"
        git config user.name "reachdevbot"
        git fetch origin gh-pages
        git checkout gh-pages
        git pull origin gh-pages
        git rm -r .
        cp -r /tmp/workspace/docs/* .
        [ -f index.html ] || exit 1
        git add .
        # https://stackoverflow.com/questions/8123674/how-to-git-commit-nothing-without-an-error
        git diff-index --quiet HEAD || (git commit -m "[ci skip] docs for ${CIRCLE_SHA1}" && touch .did_change)
        git push origin gh-pages
    - slack_fail
    - run: |
        if [ -f .did_change ]; then
          git diff --exit-code HEAD~ guide-changelog.html
        fi
    - slack/notify:
        event: fail
        channel: 'CMY2TF38D' # general
        # (CMY3E5B3J = reach-lang)
        custom: |
          {
            "blocks": [{
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "<https://docs.reach.sh/guide-changelog.html|Changelog> has changed!"
              }
            }]
          }

  "sh-check":
    executor: fake
    steps:
    - checkout
    - shellcheck/install
    - run: |
        make sh-lint
    - slack_fail
  "build":
    executor:
      name: fake
      class: "medium"
    steps:
    - checkout
    - run: |
        mkdir -p ~/.local /tmp/workspace/bin
        ln -sf /tmp/workspace/bin ~/.local/bin
        # Install mo
        curl -sSLo ~/.local/bin/mo https://git.io/get-mo
        # Install solc # XXX get version from hs/Dockerfile.reachc
        curl -sSLo ~/.local/bin/solc \
          https://github.com/ethereum/solidity/releases/download/v0.8.7/solc-static-linux
        # Install Z3 # XXX get version from hs/Dockerfile.reachc
        Z3_VER=4.8.12
        Z3_SYS=x64-glibc-2.31
        curl -sSLo /tmp/z3.zip \
              https://github.com/Z3Prover/z3/releases/download/z3-${Z3_VER}/z3-${Z3_VER}-${Z3_SYS}.zip \
          && unzip -p /tmp/z3.zip z3-${Z3_VER}-${Z3_SYS}/bin/z3 \
            | cat > ~/.local/bin/z3
        chmod +x ~/.local/bin/*
    - stack_deps
    - srd_yes
    - run: |
        (cd hs && make hs-clean)
        (cd hs && make hs-build)
        (cd hs && make build)
        (cd hs && stack install)
        (cd js && make build)
        (cd js/stdlib && make check)
        mkdir -p /tmp/workspace/docker

        for IMG in runner rpc-server reach reach-cli ; do
          echo "docker save reachsh/${IMG}:latest..."
          docker save reachsh/${IMG}:latest | gzip > /tmp/workspace/docker/${IMG}.tar.gz
        done
    - persist_to_workspace:
        root: /tmp/workspace/
        paths:
          - bin
          - docker
    - slack_fail
  "hs-test":
    executor:
      name: fake
      class: "medium"
    steps:
    - checkout
    - restore_bin
    - stack_deps
    - run:
        command: (cd hs && make hs-test-xml)
        no_output_timeout: 30m
    - store_test_results:
        path: "hs/test-reports"
    - slack_fail
  "hs-check":
    executor: real
    steps:
    - checkout
    - restore_bin
    - stack_deps
    - run: |
        (cd hs && make hs-check)
    - store_artifacts:
        path: hs/stan.html
    - slack_fail
  "js-test":
    executor: real
    steps:
    - checkout
    - restore_bin
    - and_restore_docker
    - run: |
        (cd js/dockerized-tests && make clean-test && sbin/test.sh)
    - slack_fail
  "examples":
    parameters:
      connector:
        description: "which connector"
        type: string
      size:
        description: "parallel size"
        type: string
      rank:
        description: "parallel rank"
        type: string
    executor: real
    steps:
    - checkout
    - restore_bin
    - and_restore_docker
    - run: |
        mkdir -p /tmp/workspace/artifacts /tmp/workspace/record /tmp/artifacts
    - run:
        command: |
          cd .circleci && ./example.sh <<parameters.connector>> <<parameters.size>> <<parameters.rank>>
        no_output_timeout: 20m
    - store_artifacts:
        path: /tmp/artifacts
    - run: |
        CIRCLE_ARTIFACTS_URL=$(curl -X GET "https://circleci.com/api/v2/project/github/reach-sh/reach-lang/${CIRCLE_BUILD_NUM}/artifacts" \
          -H "Accept: application/json" \
          -u "${CIRCLE_API_TOKEN}:")
        echo "${CIRCLE_ARTIFACTS_URL}" > /tmp/workspace/artifacts/<<parameters.connector>>.<<parameters.rank>>
    - persist_to_workspace:
        root: /tmp/workspace
        paths:
          - artifacts
          - record
  "examples-sink":
    executor: fake
    steps:
    - checkout
    - workattach
    - run: |
        ./.circleci/record.py >> $BASH_ENV
    - run:
        when: always
        command: |
          echo "${RECORD_MESSAGE}"
    - slack/notify:
        event: always
        # NOTE: We used to do
        # branch_pattern: "master,gh-pages"
        # But, I am disabling it on purpose
        custom: |
          { "blocks": [
              { "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${RECORD_MESSAGE}" }}]}

workflows:
  docs:
    jobs:
    - "docs-render"
    - "docs-deploy":
       filters:
         branches:
           only: master
       requires:
       - "docs-render"
  buildless:
    jobs:
    - "sh-check"
  build:
    jobs:
    - "build"
    - "hs-test":
        requires:
          - "build"
    - "hs-check":
        requires:
          - "build"
    - "js-test":
        requires:
          - "build"
    # Sink and examples follow
