Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "balance zero at application exit"
  at ./index-bad.rsh:8:30:compileDApp

  // Violation Witness

  const v112 = "Alice".interact.wager;
  //    ^ could = 1
  //      from: ./index-bad.rsh:11:10:property binding
  const v118 = protect<UInt>("Alice".interact.getHand());
  //    ^ could = 0
  //      from: ./index-bad.rsh:21:50:application
  const v134 = protect<UInt>("Bob".interact.getHand());
  //    ^ could = 2
  //      from: ./index-bad.rsh:29:48:application

  // Theorem Formalization

  const v113 = <None null>;
  //    ^ would be None(null )
  const v115 = array(Tuple(Data({"None": Null, "Some": Token}), UInt), [[v113, 0 ] ]);
  //    ^ would be array(Tuple(Data({"None": Null, "Some": Token}), UInt), [] )
  const v131 = Array.set(v115, 0, [v113, (v115[0][1] + v112) ] );
  //    ^ would be array(Tuple(Data({"None": Null, "Some": Token}), UInt), [[None(null ), 1 ] ] )
  const v146 = Array.set(v131, 0, [v113, (v131[0][1] + v112) ] );
  //    ^ would be array(Tuple(Data({"None": Null, "Some": Token}), UInt), [[None(null ), 2 ] ] )
  const v149 = (v118 + (4 - v134)) % 3;
  //    ^ would be 2
  const v156 = ((v149 == 2) ? [1, 0 ] : ((v149 == 0) ? [0, 2 ] : [1, 1 ]));
  //    ^ would be [1, 0 ]
  const v171 = Array.set(v146, 0, [v113, (v146[0][1] - (v156[0] * v112)) ] );
  //    ^ would be array(Tuple(Data({"None": Null, "Some": Token}), UInt), [[None(null ), 1 ] ] )
  const v188 = 0 == Array.set(v171, 0, [v113, (v171[0][1] - (v156[1] * v112)) ] )[0][1];
  //    ^ would be false
  assert(v188);

  Verifying when NO participants are honest
Checked 23 theorems; 2 failures (and 1 omitted repeats) :'(
