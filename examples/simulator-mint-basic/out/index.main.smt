(set-option :print-success true )
(set-option :produce-models true )
(set-logic ALL )
(define-sort UInt () Int )
(declare-sort Bytes 0 )
(declare-fun bytes0 () Bytes )
(declare-fun bytes (Int ) Bytes )
(define-fun Bytes_toBytes ((b Bytes ) ) Bytes b )
(declare-fun bytesAppend (Bytes Bytes ) Bytes )
(declare-sort Digest 0 )
(declare-fun digest (Bytes ) Digest )
(declare-fun Digest_toBytes (Digest ) Bytes )
(declare-sort Null 0 )
(declare-fun null () Null )
(define-fun Null_toBytes ((n Null ) ) Bytes bytes0 )
(declare-fun Bool_toBytes (Bool ) Bytes )
(declare-fun UInt_toBytes (UInt ) Bytes )
(declare-sort Address 0 )
(declare-fun Address_toBytes (Address ) Bytes )
(declare-sort Token 0 )
(declare-fun Token_toBytes (Token ) Bytes )
(declare-sort Contract 0 )
(declare-fun Contract_toBytes (Contract ) Bytes )
(push 1 ) ;; {
  (declare-datatype T0 ((T0_cons (T0_amt UInt ) (T0_metadata Bytes ) (T0_name Bytes ) (T0_supply UInt ) (T0_symbol Bytes ) (T0_url Bytes ) ) ) )
  (declare-fun T0_toBytes (T0 ) Bytes )
  (declare-datatype T1 ((T1_cons (T1_metadata Bytes ) (T1_name Bytes ) (T1_supply UInt ) (T1_symbol Bytes ) (T1_url Bytes ) ) ) )
  (declare-fun T1_toBytes (T1 ) Bytes )
  (declare-datatype T2 ((T2_cons (T2_name Bytes ) (T2_symbol Bytes ) ) ) )
  (declare-fun T2_toBytes (T2 ) Bytes )
  (declare-fun dlc_UInt_max () UInt )
  (assert (<= 0 dlc_UInt_max ) )
  (declare-fun address_Alice () Address )
  (assert true )
  (declare-fun address_Bob () Address )
  (assert true )
  (push 1 ) ;; {
    (declare-fun v390 () Address )
    (assert true )
    (declare-fun v391 () Address )
    (assert true )
    (declare-fun v225 () T0 )
    (assert (and (<= 0 (T0_amt v225 ) ) true true (<= 0 (T0_supply v225 ) ) true true ) )
    (declare-fun v226 () Bytes )
    (assert true )
    (assert (= v226 (T0_name v225 ) ) )
    (declare-fun v227 () Bytes )
    (assert true )
    (assert (= v227 (T0_symbol v225 ) ) )
    (declare-fun v228 () Bytes )
    (assert true )
    (assert (= v228 (T0_url v225 ) ) )
    (declare-fun v229 () Bytes )
    (assert true )
    (assert (= v229 (T0_metadata v225 ) ) )
    (declare-fun v230 () UInt )
    (assert (<= 0 v230 ) )
    (assert (= v230 (T0_supply v225 ) ) )
    (declare-fun v231 () UInt )
    (assert (<= 0 v231 ) )
    (assert (= v231 (T0_amt v225 ) ) )
    (declare-fun v232 () UInt )
    (assert (<= 0 v232 ) )
    (assert (= v232 (* 4 v231 ) ) )
    (declare-fun v233 () Bool )
    (assert true )
    (assert (= v233 (<= v232 v230 ) ) )
    (assert v233 )
    (declare-fun v235 () Bool )
    (assert true )
    (assert (= v235 (<= v232 dlc_UInt_max ) ) )
    (assert v235 )
    (push 1 ) ;; {
      (pop 1 ) ;; }
    (push 1 ) ;; {
      (declare-fun v236 () Address )
      (assert true )
      (assert (= v236 address_Alice ) )
      (declare-fun v237 () Bytes )
      (assert true )
      (assert (= v237 v226 ) )
      (declare-fun v238 () Bytes )
      (assert true )
      (assert (= v238 v227 ) )
      (declare-fun v239 () Bytes )
      (assert true )
      (assert (= v239 v228 ) )
      (declare-fun v240 () Bytes )
      (assert true )
      (assert (= v240 v229 ) )
      (declare-fun v241 () UInt )
      (assert (<= 0 v241 ) )
      (assert (= v241 v230 ) )
      (declare-fun v242 () UInt )
      (assert (<= 0 v242 ) )
      (assert (= v242 v231 ) )
      (declare-fun pv_net392 () UInt )
      (assert (<= 0 pv_net392 ) )
      (declare-fun pv_tok394 () Token )
      (assert true )
      (declare-fun pv_ks393 () (Array Token UInt ) )
      (assert (<= 0 (select pv_ks393 pv_tok394 ) ) )
      (assert (= pv_net392 0 ) )
      (declare-fun v395 () Address )
      (assert true )
      (declare-fun v396 () Address )
      (assert true )
      (declare-fun v243 () UInt )
      (assert (<= 0 v243 ) )
      (declare-fun v244 () UInt )
      (assert (<= 0 v244 ) )
      (declare-fun v43 () Bool )
      (assert true )
      (assert (= v243 0 ) )
      (assert (= v244 0 ) )
      (push 1 ) ;; {
        (assert (not (= 0 pv_net392 ) ) )
        (check-sat-using (try-for default 10 ) )
        ;; unsat
        (pop 1 ) ;; }
      (assert (= 0 pv_net392 ) )
      (declare-fun v246 () UInt )
      (assert (<= 0 v246 ) )
      (assert (= v246 (* 4 v242 ) ) )
      (declare-fun v247 () Bool )
      (assert true )
      (assert (= v247 (<= v246 v241 ) ) )
      (push 1 ) ;; {
        (assert (not v247 ) )
        (check-sat-using (try-for default 10 ) )
        ;; unsat
        (pop 1 ) ;; }
      (assert v247 )
      (declare-fun v249 () Bool )
      (assert true )
      (assert (= v249 (<= v246 dlc_UInt_max ) ) )
      (push 1 ) ;; {
        (assert (not v249 ) )
        (check-sat-using (try-for default 10 ) )
        ;; unsat
        (pop 1 ) ;; }
      (assert v249 )
      (declare-fun v250 () Token )
      (assert true )
      (declare-fun v251 () Token )
      (assert true )
      (assert (= v251 v250 ) )
      (declare-fun v253 () T1 )
      (assert (and true true (<= 0 (T1_supply v253 ) ) true true ) )
      (assert (= v253 (T1_cons v240 v237 v241 v238 v239 ) ) )
      (push 1 ) ;; {
        (pop 1 ) ;; }
      (push 1 ) ;; {
        (declare-fun v254 () Address )
        (assert true )
        (assert (= v254 address_Bob ) )
        (declare-fun pv_net397 () UInt )
        (assert (<= 0 pv_net397 ) )
        (declare-fun pv_tok399 () Token )
        (assert true )
        (declare-fun pv_ks398 () (Array Token UInt ) )
        (assert (<= 0 (select pv_ks398 pv_tok399 ) ) )
        (assert (= pv_net397 0 ) )
        (declare-fun v400 () Address )
        (assert true )
        (declare-fun v401 () Address )
        (assert true )
        (declare-fun v255 () UInt )
        (assert (<= 0 v255 ) )
        (declare-fun v256 () UInt )
        (assert (<= 0 v256 ) )
        (declare-fun v59 () Bool )
        (assert true )
        (assert (= v255 (+ v243 1 ) ) )
        (assert (= v256 (+ v244 1 ) ) )
        (push 1 ) ;; {
          (assert (not (= 0 pv_net397 ) ) )
          (check-sat-using (try-for default 10 ) )
          ;; unsat
          (pop 1 ) ;; }
        (assert (= 0 pv_net397 ) )
        (declare-fun v259 () T1 )
        (assert (and true true (<= 0 (T1_supply v259 ) ) true true ) )
        (assert (= v259 (T1_cons v240 v237 v241 v238 v239 ) ) )
        (push 1 ) ;; {
          (pop 1 ) ;; }
        (push 1 ) ;; {
          (declare-fun v260 () Address )
          (assert true )
          (assert (= v260 address_Bob ) )
          (declare-fun pv_net402 () UInt )
          (assert (<= 0 pv_net402 ) )
          (declare-fun pv_tok404 () Token )
          (assert true )
          (declare-fun pv_ks403 () (Array Token UInt ) )
          (assert (<= 0 (select pv_ks403 pv_tok404 ) ) )
          (assert (= pv_net402 0 ) )
          (declare-fun v405 () Address )
          (assert true )
          (declare-fun v406 () Address )
          (assert true )
          (declare-fun v261 () UInt )
          (assert (<= 0 v261 ) )
          (declare-fun v262 () UInt )
          (assert (<= 0 v262 ) )
          (declare-fun v70 () Bool )
          (assert true )
          (assert (= v261 (+ v255 1 ) ) )
          (assert (= v262 (+ v256 1 ) ) )
          (push 1 ) ;; {
            (assert (not (= 0 pv_net402 ) ) )
            (check-sat-using (try-for default 10 ) )
            ;; unsat
            (pop 1 ) ;; }
          (assert (= 0 pv_net402 ) )
          (declare-fun v264 () Bool )
          (assert true )
          (assert (= v264 (= v254 v260 ) ) )
          (push 1 ) ;; {
            (assert (not v264 ) )
            (check-sat-using (try-for default 10 ) )
            ;; unsat
            (pop 1 ) ;; }
          (assert v264 )
          (declare-fun v265 () UInt )
          (assert (<= 0 v265 ) )
          (assert (= v265 (* 2 v242 ) ) )
          (declare-fun v267 () Bool )
          (assert true )
          (assert (= v267 (<= v265 v241 ) ) )
          (push 1 ) ;; {
            (assert (not v267 ) )
            (check-sat-using (try-for default 10 ) )
            ;; unsat
            (pop 1 ) ;; }
          (assert v267 )
          (declare-fun v269 () UInt )
          (assert (<= 0 v269 ) )
          (assert (= v269 (- v241 v265 ) ) )
          (push 1 ) ;; {
            (pop 1 ) ;; }
          (push 1 ) ;; {
            (declare-fun v272 () Address )
            (assert true )
            (assert (= v272 address_Alice ) )
            (declare-fun pv_net407 () UInt )
            (assert (<= 0 pv_net407 ) )
            (declare-fun pv_tok409 () Token )
            (assert true )
            (declare-fun pv_ks408 () (Array Token UInt ) )
            (assert (<= 0 (select pv_ks408 pv_tok409 ) ) )
            (assert (= pv_net407 0 ) )
            (declare-fun v410 () Address )
            (assert true )
            (declare-fun v411 () Address )
            (assert true )
            (declare-fun v273 () UInt )
            (assert (<= 0 v273 ) )
            (declare-fun v274 () UInt )
            (assert (<= 0 v274 ) )
            (declare-fun v86 () Bool )
            (assert true )
            (assert (= v273 (+ v261 1 ) ) )
            (assert (= v274 (+ v262 1 ) ) )
            (push 1 ) ;; {
              (assert (not (= 0 pv_net407 ) ) )
              (check-sat-using (try-for default 10 ) )
              ;; unsat
              (pop 1 ) ;; }
            (assert (= 0 pv_net407 ) )
            (declare-fun v276 () Bool )
            (assert true )
            (assert (= v276 (= v236 v272 ) ) )
            (push 1 ) ;; {
              (assert (not v276 ) )
              (check-sat-using (try-for default 10 ) )
              ;; unsat
              (pop 1 ) ;; }
            (assert v276 )
            (declare-fun v279 () Bool )
            (assert true )
            (assert (= v279 (<= v265 v269 ) ) )
            (push 1 ) ;; {
              (assert (not v279 ) )
              (check-sat-using (try-for default 10 ) )
              ;; unsat
              (pop 1 ) ;; }
            (assert v279 )
            (declare-fun v281 () UInt )
            (assert (<= 0 v281 ) )
            (assert (= v281 (- v269 v265 ) ) )
            (push 1 ) ;; {
              (pop 1 ) ;; }
            (push 1 ) ;; {
              (declare-fun v285 () Address )
              (assert true )
              (assert (= v285 address_Alice ) )
              (declare-fun pv_net412 () UInt )
              (assert (<= 0 pv_net412 ) )
              (declare-fun pv_tok414 () Token )
              (assert true )
              (declare-fun pv_ks413 () (Array Token UInt ) )
              (assert (<= 0 (select pv_ks413 pv_tok414 ) ) )
              (assert (= pv_net412 0 ) )
              (assert (= (select pv_ks413 v251 ) v265 ) )
              (declare-fun v415 () Address )
              (assert true )
              (declare-fun v416 () Address )
              (assert true )
              (declare-fun v286 () UInt )
              (assert (<= 0 v286 ) )
              (declare-fun v287 () UInt )
              (assert (<= 0 v287 ) )
              (declare-fun v106 () Bool )
              (assert true )
              (assert (= v286 (+ v273 1 ) ) )
              (assert (= v287 (+ v274 1 ) ) )
              (push 1 ) ;; {
                (assert (not (= 0 pv_net412 ) ) )
                (check-sat-using (try-for default 10 ) )
                ;; unsat
                (pop 1 ) ;; }
              (assert (= 0 pv_net412 ) )
              (declare-fun v291 () UInt )
              (assert (<= 0 v291 ) )
              (assert (= v291 (+ v281 v265 ) ) )
              (push 1 ) ;; {
                (assert (not (= v265 (select pv_ks413 v251 ) ) ) )
                (check-sat-using (try-for default 10 ) )
                ;; unsat
                (pop 1 ) ;; }
              (assert (= v265 (select pv_ks413 v251 ) ) )
              (declare-fun v292 () Bool )
              (assert true )
              (assert (= v292 (= v236 v285 ) ) )
              (push 1 ) ;; {
                (assert (not v292 ) )
                (check-sat-using (try-for default 10 ) )
                ;; unsat
                (pop 1 ) ;; }
              (assert v292 )
              (push 1 ) ;; {
                (pop 1 ) ;; }
              (push 1 ) ;; {
                (declare-fun v294 () Address )
                (assert true )
                (assert (= v294 address_Bob ) )
                (declare-fun pv_net417 () UInt )
                (assert (<= 0 pv_net417 ) )
                (declare-fun pv_tok419 () Token )
                (assert true )
                (declare-fun pv_ks418 () (Array Token UInt ) )
                (assert (<= 0 (select pv_ks418 pv_tok419 ) ) )
                (assert (= pv_net417 0 ) )
                (assert (= (select pv_ks418 v251 ) v265 ) )
                (declare-fun v420 () Address )
                (assert true )
                (declare-fun v421 () Address )
                (assert true )
                (declare-fun v295 () UInt )
                (assert (<= 0 v295 ) )
                (declare-fun v296 () UInt )
                (assert (<= 0 v296 ) )
                (declare-fun v116 () Bool )
                (assert true )
                (assert (= v295 (+ v286 1 ) ) )
                (assert (= v296 (+ v287 1 ) ) )
                (push 1 ) ;; {
                  (assert (not (= 0 pv_net417 ) ) )
                  (check-sat-using (try-for default 10 ) )
                  ;; unsat
                  (pop 1 ) ;; }
                (assert (= 0 pv_net417 ) )
                (declare-fun v300 () UInt )
                (assert (<= 0 v300 ) )
                (assert (= v300 (+ v291 v265 ) ) )
                (push 1 ) ;; {
                  (assert (not (= v265 (select pv_ks418 v251 ) ) ) )
                  (check-sat-using (try-for default 10 ) )
                  ;; unsat
                  (pop 1 ) ;; }
                (assert (= v265 (select pv_ks418 v251 ) ) )
                (declare-fun v301 () Bool )
                (assert true )
                (assert (= v301 (= v254 v294 ) ) )
                (push 1 ) ;; {
                  (assert (not v301 ) )
                  (check-sat-using (try-for default 10 ) )
                  ;; unsat
                  (pop 1 ) ;; }
                (assert v301 )
                (declare-fun v303 () Bool )
                (assert true )
                (assert (= v303 (<= v241 v300 ) ) )
                (push 1 ) ;; {
                  (assert (not v303 ) )
                  (check-sat-using (try-for default 10 ) )
                  ;; unsat
                  (pop 1 ) ;; }
                (assert v303 )
                (declare-fun v305 () UInt )
                (assert (<= 0 v305 ) )
                (assert (= v305 (- v300 v241 ) ) )
                (declare-fun v307 () UInt )
                (assert (<= 0 v307 ) )
                (assert (= v307 (- v241 v241 ) ) )
                (declare-fun v311 () Bool )
                (assert true )
                (assert (= v311 (= 0 v307 ) ) )
                (push 1 ) ;; {
                  (assert (not v311 ) )
                  (check-sat-using (try-for default 10 ) )
                  ;; unsat
                  (pop 1 ) ;; }
                (assert v311 )
                (declare-fun v312 () Bytes )
                (assert true )
                (assert (= v312 (bytes 3136578990 ) ) )
                (declare-fun v313 () Bytes )
                (assert true )
                (assert (= v313 (bytes 420107693 ) ) )
                (declare-fun v314 () Token )
                (assert true )
                (declare-fun v315 () Token )
                (assert true )
                (assert (= v315 v314 ) )
                (declare-fun v317 () T2 )
                (assert (and true true ) )
                (assert (= v317 (T2_cons v237 v238 ) ) )
                (declare-fun v319 () T2 )
                (assert (and true true ) )
                (assert (= v319 (T2_cons v237 v238 ) ) )
                (push 1 ) ;; {
                  (pop 1 ) ;; }
                (push 1 ) ;; {
                  (declare-fun v320 () Address )
                  (assert true )
                  (assert (= v320 address_Bob ) )
                  (declare-fun pv_net422 () UInt )
                  (assert (<= 0 pv_net422 ) )
                  (declare-fun pv_tok424 () Token )
                  (assert true )
                  (declare-fun pv_ks423 () (Array Token UInt ) )
                  (assert (<= 0 (select pv_ks423 pv_tok424 ) ) )
                  (assert (= pv_net422 0 ) )
                  (declare-fun v425 () Address )
                  (assert true )
                  (declare-fun v426 () Address )
                  (assert true )
                  (declare-fun v321 () UInt )
                  (assert (<= 0 v321 ) )
                  (declare-fun v322 () UInt )
                  (assert (<= 0 v322 ) )
                  (declare-fun v146 () Bool )
                  (assert true )
                  (assert (= v321 (+ v295 1 ) ) )
                  (assert (= v322 (+ v296 1 ) ) )
                  (push 1 ) ;; {
                    (assert (not (= 0 pv_net422 ) ) )
                    (check-sat-using (try-for default 10 ) )
                    ;; unsat
                    (pop 1 ) ;; }
                  (assert (= 0 pv_net422 ) )
                  (declare-fun v324 () Bool )
                  (assert true )
                  (assert (= v324 (= v254 v320 ) ) )
                  (push 1 ) ;; {
                    (assert (not v324 ) )
                    (check-sat-using (try-for default 10 ) )
                    ;; unsat
                    (pop 1 ) ;; }
                  (assert v324 )
                  (declare-fun v327 () Bool )
                  (assert true )
                  (assert (= v327 (<= v265 dlc_UInt_max ) ) )
                  (push 1 ) ;; {
                    (assert (not v327 ) )
                    (check-sat-using (try-for default 10 ) )
                    ;; unsat
                    (pop 1 ) ;; }
                  (assert v327 )
                  (declare-fun v329 () UInt )
                  (assert (<= 0 v329 ) )
                  (assert (= v329 (- dlc_UInt_max v265 ) ) )
                  (push 1 ) ;; {
                    (pop 1 ) ;; }
                  (push 1 ) ;; {
                    (declare-fun v332 () Address )
                    (assert true )
                    (assert (= v332 address_Alice ) )
                    (declare-fun pv_net427 () UInt )
                    (assert (<= 0 pv_net427 ) )
                    (declare-fun pv_tok429 () Token )
                    (assert true )
                    (declare-fun pv_ks428 () (Array Token UInt ) )
                    (assert (<= 0 (select pv_ks428 pv_tok429 ) ) )
                    (assert (= pv_net427 0 ) )
                    (declare-fun v430 () Address )
                    (assert true )
                    (declare-fun v431 () Address )
                    (assert true )
                    (declare-fun v333 () UInt )
                    (assert (<= 0 v333 ) )
                    (declare-fun v334 () UInt )
                    (assert (<= 0 v334 ) )
                    (declare-fun v162 () Bool )
                    (assert true )
                    (assert (= v333 (+ v321 1 ) ) )
                    (assert (= v334 (+ v322 1 ) ) )
                    (push 1 ) ;; {
                      (assert (not (= 0 pv_net427 ) ) )
                      (check-sat-using (try-for default 10 ) )
                      ;; unsat
                      (pop 1 ) ;; }
                    (assert (= 0 pv_net427 ) )
                    (declare-fun v336 () Bool )
                    (assert true )
                    (assert (= v336 (= v236 v332 ) ) )
                    (push 1 ) ;; {
                      (assert (not v336 ) )
                      (check-sat-using (try-for default 10 ) )
                      ;; unsat
                      (pop 1 ) ;; }
                    (assert v336 )
                    (declare-fun v339 () Bool )
                    (assert true )
                    (assert (= v339 (<= v265 v329 ) ) )
                    (push 1 ) ;; {
                      (assert (not v339 ) )
                      (check-sat-using (try-for default 10 ) )
                      ;; unsat
                      (pop 1 ) ;; }
                    (assert v339 )
                    (declare-fun v341 () UInt )
                    (assert (<= 0 v341 ) )
                    (assert (= v341 (- v329 v265 ) ) )
                    (declare-fun v346 () Bool )
                    (assert true )
                    (assert (= v346 (<= v341 v341 ) ) )
                    (push 1 ) ;; {
                      (assert (not v346 ) )
                      (check-sat-using (try-for default 10 ) )
                      ;; unsat
                      (pop 1 ) ;; }
                    (assert v346 )
                    (declare-fun v348 () UInt )
                    (assert (<= 0 v348 ) )
                    (assert (= v348 (- v341 v341 ) ) )
                    (declare-fun v350 () UInt )
                    (assert (<= 0 v350 ) )
                    (assert (= v350 (- dlc_UInt_max v341 ) ) )
                    (push 1 ) ;; {
                      (pop 1 ) ;; }
                    (push 1 ) ;; {
                      (declare-fun v352 () Address )
                      (assert true )
                      (assert (= v352 address_Alice ) )
                      (declare-fun pv_net432 () UInt )
                      (assert (<= 0 pv_net432 ) )
                      (declare-fun pv_tok434 () Token )
                      (assert true )
                      (declare-fun pv_ks433 () (Array Token UInt ) )
                      (assert (<= 0 (select pv_ks433 pv_tok434 ) ) )
                      (assert (= pv_net432 0 ) )
                      (assert (= (select pv_ks433 v315 ) v265 ) )
                      (declare-fun v435 () Address )
                      (assert true )
                      (declare-fun v436 () Address )
                      (assert true )
                      (declare-fun v353 () UInt )
                      (assert (<= 0 v353 ) )
                      (declare-fun v354 () UInt )
                      (assert (<= 0 v354 ) )
                      (declare-fun v189 () Bool )
                      (assert true )
                      (assert (= v353 (+ v333 1 ) ) )
                      (assert (= v354 (+ v334 1 ) ) )
                      (push 1 ) ;; {
                        (assert (not (= 0 pv_net432 ) ) )
                        (check-sat-using (try-for default 10 ) )
                        ;; unsat
                        (pop 1 ) ;; }
                      (assert (= 0 pv_net432 ) )
                      (declare-fun v358 () UInt )
                      (assert (<= 0 v358 ) )
                      (assert (= v358 (+ v348 v265 ) ) )
                      (push 1 ) ;; {
                        (assert (not (= v265 (select pv_ks433 v315 ) ) ) )
                        (check-sat-using (try-for default 10 ) )
                        ;; unsat
                        (pop 1 ) ;; }
                      (assert (= v265 (select pv_ks433 v315 ) ) )
                      (declare-fun v359 () Bool )
                      (assert true )
                      (assert (= v359 (= v236 v352 ) ) )
                      (push 1 ) ;; {
                        (assert (not v359 ) )
                        (check-sat-using (try-for default 10 ) )
                        ;; unsat
                        (pop 1 ) ;; }
                      (assert v359 )
                      (push 1 ) ;; {
                        (pop 1 ) ;; }
                      (push 1 ) ;; {
                        (declare-fun v361 () Address )
                        (assert true )
                        (assert (= v361 address_Bob ) )
                        (declare-fun pv_net437 () UInt )
                        (assert (<= 0 pv_net437 ) )
                        (declare-fun pv_tok439 () Token )
                        (assert true )
                        (declare-fun pv_ks438 () (Array Token UInt ) )
                        (assert (<= 0 (select pv_ks438 pv_tok439 ) ) )
                        (assert (= pv_net437 0 ) )
                        (assert (= (select pv_ks438 v315 ) v265 ) )
                        (declare-fun v440 () Address )
                        (assert true )
                        (declare-fun v441 () Address )
                        (assert true )
                        (declare-fun v362 () UInt )
                        (assert (<= 0 v362 ) )
                        (declare-fun v363 () UInt )
                        (assert (<= 0 v363 ) )
                        (declare-fun v199 () Bool )
                        (assert true )
                        (assert (= v362 (+ v353 1 ) ) )
                        (assert (= v363 (+ v354 1 ) ) )
                        (push 1 ) ;; {
                          (assert (not (= 0 pv_net437 ) ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert (= 0 pv_net437 ) )
                        (declare-fun v367 () UInt )
                        (assert (<= 0 v367 ) )
                        (assert (= v367 (+ v358 v265 ) ) )
                        (push 1 ) ;; {
                          (assert (not (= v265 (select pv_ks438 v315 ) ) ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert (= v265 (select pv_ks438 v315 ) ) )
                        (declare-fun v368 () Bool )
                        (assert true )
                        (assert (= v368 (= v254 v361 ) ) )
                        (push 1 ) ;; {
                          (assert (not v368 ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert v368 )
                        (declare-fun v371 () Bool )
                        (assert true )
                        (assert (= v371 (<= v367 v367 ) ) )
                        (push 1 ) ;; {
                          (assert (not v371 ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert v371 )
                        (declare-fun v373 () UInt )
                        (assert (<= 0 v373 ) )
                        (assert (= v373 (- v367 v367 ) ) )
                        (declare-fun v375 () UInt )
                        (assert (<= 0 v375 ) )
                        (assert (= v375 (- v350 v367 ) ) )
                        (declare-fun v379 () Bool )
                        (assert true )
                        (assert (= v379 (= 0 v375 ) ) )
                        (push 1 ) ;; {
                          (assert (not v379 ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert v379 )
                        (declare-fun v383 () Bool )
                        (assert true )
                        (assert (= v383 (= 0 v305 ) ) )
                        (push 1 ) ;; {
                          (assert (not v383 ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert v383 )
                        (declare-fun v385 () Bool )
                        (assert true )
                        (assert (= v385 (= 0 v373 ) ) )
                        (push 1 ) ;; {
                          (assert (not v385 ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert v385 )
                        (pop 1 ) ;; }
                      (pop 1 ) ;; }
                    (pop 1 ) ;; }
                  (pop 1 ) ;; }
                (pop 1 ) ;; }
              (pop 1 ) ;; }
            (pop 1 ) ;; }
          (pop 1 ) ;; }
        (pop 1 ) ;; }
      (pop 1 ) ;; }
    (pop 1 ) ;; }
  (push 1 ) ;; {
    (declare-fun v442 () Address )
    (assert true )
    (declare-fun v443 () Address )
    (assert true )
    (push 1 ) ;; {
      (pop 1 ) ;; }
    (push 1 ) ;; {
      (declare-fun v236 () Address )
      (assert true )
      (declare-fun v237 () Bytes )
      (assert true )
      (declare-fun v238 () Bytes )
      (assert true )
      (declare-fun v239 () Bytes )
      (assert true )
      (declare-fun v240 () Bytes )
      (assert true )
      (declare-fun v241 () UInt )
      (assert (<= 0 v241 ) )
      (declare-fun v242 () UInt )
      (assert (<= 0 v242 ) )
      (declare-fun pv_net444 () UInt )
      (assert (<= 0 pv_net444 ) )
      (declare-fun pv_tok446 () Token )
      (assert true )
      (declare-fun pv_ks445 () (Array Token UInt ) )
      (assert (<= 0 (select pv_ks445 pv_tok446 ) ) )
      (declare-fun v447 () Address )
      (assert true )
      (declare-fun v448 () Address )
      (assert true )
      (declare-fun v243 () UInt )
      (assert (<= 0 v243 ) )
      (declare-fun v244 () UInt )
      (assert (<= 0 v244 ) )
      (declare-fun v43 () Bool )
      (assert true )
      (assert (= v243 0 ) )
      (assert (= v244 0 ) )
      (assert (= 0 pv_net444 ) )
      (declare-fun v246 () UInt )
      (assert (<= 0 v246 ) )
      (assert (= v246 (* 4 v242 ) ) )
      (declare-fun v247 () Bool )
      (assert true )
      (assert (= v247 (<= v246 v241 ) ) )
      (assert v247 )
      (declare-fun v249 () Bool )
      (assert true )
      (assert (= v249 (<= v246 dlc_UInt_max ) ) )
      (assert v249 )
      (declare-fun v250 () Token )
      (assert true )
      (declare-fun v251 () Token )
      (assert true )
      (assert (= v251 v250 ) )
      (push 1 ) ;; {
        (pop 1 ) ;; }
      (push 1 ) ;; {
        (declare-fun v254 () Address )
        (assert true )
        (declare-fun pv_net449 () UInt )
        (assert (<= 0 pv_net449 ) )
        (declare-fun pv_tok451 () Token )
        (assert true )
        (declare-fun pv_ks450 () (Array Token UInt ) )
        (assert (<= 0 (select pv_ks450 pv_tok451 ) ) )
        (declare-fun v452 () Address )
        (assert true )
        (declare-fun v453 () Address )
        (assert true )
        (declare-fun v255 () UInt )
        (assert (<= 0 v255 ) )
        (declare-fun v256 () UInt )
        (assert (<= 0 v256 ) )
        (declare-fun v59 () Bool )
        (assert true )
        (assert (= v255 (+ v243 1 ) ) )
        (assert (= v256 (+ v244 1 ) ) )
        (assert (= 0 pv_net449 ) )
        (push 1 ) ;; {
          (pop 1 ) ;; }
        (push 1 ) ;; {
          (declare-fun v260 () Address )
          (assert true )
          (declare-fun pv_net454 () UInt )
          (assert (<= 0 pv_net454 ) )
          (declare-fun pv_tok456 () Token )
          (assert true )
          (declare-fun pv_ks455 () (Array Token UInt ) )
          (assert (<= 0 (select pv_ks455 pv_tok456 ) ) )
          (declare-fun v457 () Address )
          (assert true )
          (declare-fun v458 () Address )
          (assert true )
          (declare-fun v261 () UInt )
          (assert (<= 0 v261 ) )
          (declare-fun v262 () UInt )
          (assert (<= 0 v262 ) )
          (declare-fun v70 () Bool )
          (assert true )
          (assert (= v261 (+ v255 1 ) ) )
          (assert (= v262 (+ v256 1 ) ) )
          (assert (= 0 pv_net454 ) )
          (declare-fun v264 () Bool )
          (assert true )
          (assert (= v264 (= v254 v260 ) ) )
          (assert v264 )
          (declare-fun v265 () UInt )
          (assert (<= 0 v265 ) )
          (assert (= v265 (* 2 v242 ) ) )
          (declare-fun v267 () Bool )
          (assert true )
          (assert (= v267 (<= v265 v241 ) ) )
          (push 1 ) ;; {
            (assert (not v267 ) )
            (check-sat-using (try-for default 10 ) )
            ;; unsat
            (pop 1 ) ;; }
          (assert v267 )
          (declare-fun v269 () UInt )
          (assert (<= 0 v269 ) )
          (assert (= v269 (- v241 v265 ) ) )
          (push 1 ) ;; {
            (pop 1 ) ;; }
          (push 1 ) ;; {
            (declare-fun v272 () Address )
            (assert true )
            (declare-fun pv_net459 () UInt )
            (assert (<= 0 pv_net459 ) )
            (declare-fun pv_tok461 () Token )
            (assert true )
            (declare-fun pv_ks460 () (Array Token UInt ) )
            (assert (<= 0 (select pv_ks460 pv_tok461 ) ) )
            (declare-fun v462 () Address )
            (assert true )
            (declare-fun v463 () Address )
            (assert true )
            (declare-fun v273 () UInt )
            (assert (<= 0 v273 ) )
            (declare-fun v274 () UInt )
            (assert (<= 0 v274 ) )
            (declare-fun v86 () Bool )
            (assert true )
            (assert (= v273 (+ v261 1 ) ) )
            (assert (= v274 (+ v262 1 ) ) )
            (assert (= 0 pv_net459 ) )
            (declare-fun v276 () Bool )
            (assert true )
            (assert (= v276 (= v236 v272 ) ) )
            (assert v276 )
            (declare-fun v279 () Bool )
            (assert true )
            (assert (= v279 (<= v265 v269 ) ) )
            (push 1 ) ;; {
              (assert (not v279 ) )
              (check-sat-using (try-for default 10 ) )
              ;; unsat
              (pop 1 ) ;; }
            (assert v279 )
            (declare-fun v281 () UInt )
            (assert (<= 0 v281 ) )
            (assert (= v281 (- v269 v265 ) ) )
            (push 1 ) ;; {
              (pop 1 ) ;; }
            (push 1 ) ;; {
              (declare-fun v285 () Address )
              (assert true )
              (declare-fun pv_net464 () UInt )
              (assert (<= 0 pv_net464 ) )
              (declare-fun pv_tok466 () Token )
              (assert true )
              (declare-fun pv_ks465 () (Array Token UInt ) )
              (assert (<= 0 (select pv_ks465 pv_tok466 ) ) )
              (declare-fun v467 () Address )
              (assert true )
              (declare-fun v468 () Address )
              (assert true )
              (declare-fun v286 () UInt )
              (assert (<= 0 v286 ) )
              (declare-fun v287 () UInt )
              (assert (<= 0 v287 ) )
              (declare-fun v106 () Bool )
              (assert true )
              (assert (= v286 (+ v273 1 ) ) )
              (assert (= v287 (+ v274 1 ) ) )
              (assert (= 0 pv_net464 ) )
              (declare-fun v291 () UInt )
              (assert (<= 0 v291 ) )
              (assert (= v291 (+ v281 v265 ) ) )
              (assert (= v265 (select pv_ks465 v251 ) ) )
              (declare-fun v292 () Bool )
              (assert true )
              (assert (= v292 (= v236 v285 ) ) )
              (assert v292 )
              (push 1 ) ;; {
                (pop 1 ) ;; }
              (push 1 ) ;; {
                (declare-fun v294 () Address )
                (assert true )
                (declare-fun pv_net469 () UInt )
                (assert (<= 0 pv_net469 ) )
                (declare-fun pv_tok471 () Token )
                (assert true )
                (declare-fun pv_ks470 () (Array Token UInt ) )
                (assert (<= 0 (select pv_ks470 pv_tok471 ) ) )
                (declare-fun v472 () Address )
                (assert true )
                (declare-fun v473 () Address )
                (assert true )
                (declare-fun v295 () UInt )
                (assert (<= 0 v295 ) )
                (declare-fun v296 () UInt )
                (assert (<= 0 v296 ) )
                (declare-fun v116 () Bool )
                (assert true )
                (assert (= v295 (+ v286 1 ) ) )
                (assert (= v296 (+ v287 1 ) ) )
                (assert (= 0 pv_net469 ) )
                (declare-fun v300 () UInt )
                (assert (<= 0 v300 ) )
                (assert (= v300 (+ v291 v265 ) ) )
                (assert (= v265 (select pv_ks470 v251 ) ) )
                (declare-fun v301 () Bool )
                (assert true )
                (assert (= v301 (= v254 v294 ) ) )
                (assert v301 )
                (declare-fun v303 () Bool )
                (assert true )
                (assert (= v303 (<= v241 v300 ) ) )
                (push 1 ) ;; {
                  (assert (not v303 ) )
                  (check-sat-using (try-for default 10 ) )
                  ;; unsat
                  (pop 1 ) ;; }
                (assert v303 )
                (declare-fun v305 () UInt )
                (assert (<= 0 v305 ) )
                (assert (= v305 (- v300 v241 ) ) )
                (declare-fun v307 () UInt )
                (assert (<= 0 v307 ) )
                (assert (= v307 (- v241 v241 ) ) )
                (declare-fun v311 () Bool )
                (assert true )
                (assert (= v311 (= 0 v307 ) ) )
                (push 1 ) ;; {
                  (assert (not v311 ) )
                  (check-sat-using (try-for default 10 ) )
                  ;; unsat
                  (pop 1 ) ;; }
                (assert v311 )
                (declare-fun v312 () Bytes )
                (assert true )
                (assert (= v312 (bytes 3136578990 ) ) )
                (declare-fun v313 () Bytes )
                (assert true )
                (assert (= v313 (bytes 420107693 ) ) )
                (declare-fun v314 () Token )
                (assert true )
                (declare-fun v315 () Token )
                (assert true )
                (assert (= v315 v314 ) )
                (push 1 ) ;; {
                  (pop 1 ) ;; }
                (push 1 ) ;; {
                  (declare-fun v320 () Address )
                  (assert true )
                  (declare-fun pv_net474 () UInt )
                  (assert (<= 0 pv_net474 ) )
                  (declare-fun pv_tok476 () Token )
                  (assert true )
                  (declare-fun pv_ks475 () (Array Token UInt ) )
                  (assert (<= 0 (select pv_ks475 pv_tok476 ) ) )
                  (declare-fun v477 () Address )
                  (assert true )
                  (declare-fun v478 () Address )
                  (assert true )
                  (declare-fun v321 () UInt )
                  (assert (<= 0 v321 ) )
                  (declare-fun v322 () UInt )
                  (assert (<= 0 v322 ) )
                  (declare-fun v146 () Bool )
                  (assert true )
                  (assert (= v321 (+ v295 1 ) ) )
                  (assert (= v322 (+ v296 1 ) ) )
                  (assert (= 0 pv_net474 ) )
                  (declare-fun v324 () Bool )
                  (assert true )
                  (assert (= v324 (= v254 v320 ) ) )
                  (assert v324 )
                  (declare-fun v327 () Bool )
                  (assert true )
                  (assert (= v327 (<= v265 dlc_UInt_max ) ) )
                  (push 1 ) ;; {
                    (assert (not v327 ) )
                    (check-sat-using (try-for default 10 ) )
                    ;; unsat
                    (pop 1 ) ;; }
                  (assert v327 )
                  (declare-fun v329 () UInt )
                  (assert (<= 0 v329 ) )
                  (assert (= v329 (- dlc_UInt_max v265 ) ) )
                  (push 1 ) ;; {
                    (pop 1 ) ;; }
                  (push 1 ) ;; {
                    (declare-fun v332 () Address )
                    (assert true )
                    (declare-fun pv_net479 () UInt )
                    (assert (<= 0 pv_net479 ) )
                    (declare-fun pv_tok481 () Token )
                    (assert true )
                    (declare-fun pv_ks480 () (Array Token UInt ) )
                    (assert (<= 0 (select pv_ks480 pv_tok481 ) ) )
                    (declare-fun v482 () Address )
                    (assert true )
                    (declare-fun v483 () Address )
                    (assert true )
                    (declare-fun v333 () UInt )
                    (assert (<= 0 v333 ) )
                    (declare-fun v334 () UInt )
                    (assert (<= 0 v334 ) )
                    (declare-fun v162 () Bool )
                    (assert true )
                    (assert (= v333 (+ v321 1 ) ) )
                    (assert (= v334 (+ v322 1 ) ) )
                    (assert (= 0 pv_net479 ) )
                    (declare-fun v336 () Bool )
                    (assert true )
                    (assert (= v336 (= v236 v332 ) ) )
                    (assert v336 )
                    (declare-fun v339 () Bool )
                    (assert true )
                    (assert (= v339 (<= v265 v329 ) ) )
                    (push 1 ) ;; {
                      (assert (not v339 ) )
                      (check-sat-using (try-for default 10 ) )
                      ;; unsat
                      (pop 1 ) ;; }
                    (assert v339 )
                    (declare-fun v341 () UInt )
                    (assert (<= 0 v341 ) )
                    (assert (= v341 (- v329 v265 ) ) )
                    (declare-fun v346 () Bool )
                    (assert true )
                    (assert (= v346 (<= v341 v341 ) ) )
                    (push 1 ) ;; {
                      (assert (not v346 ) )
                      (check-sat-using (try-for default 10 ) )
                      ;; unsat
                      (pop 1 ) ;; }
                    (assert v346 )
                    (declare-fun v348 () UInt )
                    (assert (<= 0 v348 ) )
                    (assert (= v348 (- v341 v341 ) ) )
                    (declare-fun v350 () UInt )
                    (assert (<= 0 v350 ) )
                    (assert (= v350 (- dlc_UInt_max v341 ) ) )
                    (push 1 ) ;; {
                      (pop 1 ) ;; }
                    (push 1 ) ;; {
                      (declare-fun v352 () Address )
                      (assert true )
                      (declare-fun pv_net484 () UInt )
                      (assert (<= 0 pv_net484 ) )
                      (declare-fun pv_tok486 () Token )
                      (assert true )
                      (declare-fun pv_ks485 () (Array Token UInt ) )
                      (assert (<= 0 (select pv_ks485 pv_tok486 ) ) )
                      (declare-fun v487 () Address )
                      (assert true )
                      (declare-fun v488 () Address )
                      (assert true )
                      (declare-fun v353 () UInt )
                      (assert (<= 0 v353 ) )
                      (declare-fun v354 () UInt )
                      (assert (<= 0 v354 ) )
                      (declare-fun v189 () Bool )
                      (assert true )
                      (assert (= v353 (+ v333 1 ) ) )
                      (assert (= v354 (+ v334 1 ) ) )
                      (assert (= 0 pv_net484 ) )
                      (declare-fun v358 () UInt )
                      (assert (<= 0 v358 ) )
                      (assert (= v358 (+ v348 v265 ) ) )
                      (assert (= v265 (select pv_ks485 v315 ) ) )
                      (declare-fun v359 () Bool )
                      (assert true )
                      (assert (= v359 (= v236 v352 ) ) )
                      (assert v359 )
                      (push 1 ) ;; {
                        (pop 1 ) ;; }
                      (push 1 ) ;; {
                        (declare-fun v361 () Address )
                        (assert true )
                        (declare-fun pv_net489 () UInt )
                        (assert (<= 0 pv_net489 ) )
                        (declare-fun pv_tok491 () Token )
                        (assert true )
                        (declare-fun pv_ks490 () (Array Token UInt ) )
                        (assert (<= 0 (select pv_ks490 pv_tok491 ) ) )
                        (declare-fun v492 () Address )
                        (assert true )
                        (declare-fun v493 () Address )
                        (assert true )
                        (declare-fun v362 () UInt )
                        (assert (<= 0 v362 ) )
                        (declare-fun v363 () UInt )
                        (assert (<= 0 v363 ) )
                        (declare-fun v199 () Bool )
                        (assert true )
                        (assert (= v362 (+ v353 1 ) ) )
                        (assert (= v363 (+ v354 1 ) ) )
                        (assert (= 0 pv_net489 ) )
                        (declare-fun v367 () UInt )
                        (assert (<= 0 v367 ) )
                        (assert (= v367 (+ v358 v265 ) ) )
                        (assert (= v265 (select pv_ks490 v315 ) ) )
                        (declare-fun v368 () Bool )
                        (assert true )
                        (assert (= v368 (= v254 v361 ) ) )
                        (assert v368 )
                        (declare-fun v371 () Bool )
                        (assert true )
                        (assert (= v371 (<= v367 v367 ) ) )
                        (push 1 ) ;; {
                          (assert (not v371 ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert v371 )
                        (declare-fun v373 () UInt )
                        (assert (<= 0 v373 ) )
                        (assert (= v373 (- v367 v367 ) ) )
                        (declare-fun v375 () UInt )
                        (assert (<= 0 v375 ) )
                        (assert (= v375 (- v350 v367 ) ) )
                        (declare-fun v379 () Bool )
                        (assert true )
                        (assert (= v379 (= 0 v375 ) ) )
                        (push 1 ) ;; {
                          (assert (not v379 ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert v379 )
                        (declare-fun v383 () Bool )
                        (assert true )
                        (assert (= v383 (= 0 v305 ) ) )
                        (push 1 ) ;; {
                          (assert (not v383 ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert v383 )
                        (declare-fun v385 () Bool )
                        (assert true )
                        (assert (= v385 (= 0 v373 ) ) )
                        (push 1 ) ;; {
                          (assert (not v385 ) )
                          (check-sat-using (try-for default 10 ) )
                          ;; unsat
                          (pop 1 ) ;; }
                        (assert v385 )
                        (pop 1 ) ;; }
                      (pop 1 ) ;; }
                    (pop 1 ) ;; }
                  (pop 1 ) ;; }
                (pop 1 ) ;; }
              (pop 1 ) ;; }
            (pop 1 ) ;; }
          (pop 1 ) ;; }
        (pop 1 ) ;; }
      (pop 1 ) ;; }
    (pop 1 ) ;; }
  (pop 1 ) ;; }
(exit )
