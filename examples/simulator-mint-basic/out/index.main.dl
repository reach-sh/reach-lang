#lang dl
parts {
  "Alice" = interact {
    didTransfer = IT_Fun [Bool,UInt] Null,
    getParams = IT_Fun [] Object({"amt": UInt, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)}),
    showToken = IT_UDFun Null},
  "Bob" = interact {
    didTransfer = IT_Fun [Bool,UInt] Null,
    showToken = IT_UDFun Null}};

// maps
{
  }
// initialization

{
  }
{
  }
{
  }
{
  }
const v5 = {
  i = 0,
  sign = true};
const v7 = {
  i = 0,
  sign = true};
only("Alice") {
  {
     } };
only("Bob") {
  {
     } };
fluid balance(0) := 0
only("Alice") {
  {
    const v20 = selfAddress("Alice", False, 19 )();
    prompt(v21 {impure local}) {
      const v22 = protect<Object({"amt": UInt, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
      const v23 = v22.name;
      const v24 = v22.symbol;
      const v25 = v22.url;
      const v26 = v22.metadata;
      const v27 = v22.supply;
      const v28 = v22.amt;
      const v29 = 4 * amt/28;
      const v30 = v29 <= supply/27;
      claim(CT_Assume False)(v30, Nothing);
      const v31 = 4 * amt/28;
      const v32 = v31 <= UInt.max;
      claim(CT_Assume False)(v32, Nothing);
      throw(null).to(21); }; } };
only("Alice") {
  {
     } };
publish(@?)
  .case("Alice").send({
    isClass = False,
    msg = [name/23, symbol/24, url/25, metadata/26, supply/27, amt/28],
    pay = [0, ],
    when = true})
  .recv({
    didSend = v43,
    from = v33,
    msg = [v34, v35, v36, v37, v38, v39],
    secs = v42,
    time = v41}){
    v40 <- fluid balance(0)
    fluid balance(0) := balance(0)/40
    checkPay(0, Nothing);
    fluid thisConsensusTime := thisConsensusTime/41
    fluid thisConsensusSecs := thisConsensusSecs/42
    fluid didPublish := didPublish/43
    const v44 = 4 * amt/39;
    const v45 = v44 <= supply/38;
    claim(CT_Require)(v45, Nothing);
    const v46 = 4 * amt/39;
    const v47 = v46 <= UInt.max;
    claim(CT_Require)(v47, Nothing);
    const v48 = new Token({
      decimals = null,
      metadata = metadata/37,
      name = name/34,
      supply = supply/38,
      sym = symbol/35,
      url = url/36});
    const v49 = emitLog(internal)(v48 );
    fluid balance(1) := supply/38
    fluid supply(1) := supply/38
    fluid destroyed(1) := false
    only("Alice") {
      {
        const v52 = selfAddress("Alice", False, 51 )();
        const v54 = {
          metadata = metadata/37,
          name = name/34,
          supply = supply/38,
          symbol = symbol/35,
          url = url/36};
        protect<Null>("Alice".interact.showToken(tok1/49, v54 )); } };
    commit();
    only("Bob") {
      {
         } };
    publish(@?)
      .case("Bob").send({
        isClass = False,
        msg = [],
        pay = [0, ],
        when = true})
      .recv({
        didSend = v59,
        from = v55,
        msg = [],
        secs = v58,
        time = v57}){
        v56 <- fluid balance(0)
        fluid balance(0) := balance(0)/56
        checkPay(0, Nothing);
        fluid thisConsensusTime := thisConsensusTime/57
        fluid thisConsensusSecs := thisConsensusSecs/58
        fluid didPublish := didPublish/59
        only("Bob") {
          {
            const v62 = selfAddress("Bob", False, 61 )();
            const v64 = {
              metadata = metadata/37,
              name = name/34,
              supply = supply/38,
              symbol = symbol/35,
              url = url/36};
            protect<Null>("Bob".interact.showToken(tok1/49, v64 )); } };
        commit();
        only("Bob") {
          {
             } };
        publish(@?)
          .case("Bob").send({
            isClass = False,
            msg = [],
            pay = [0, ],
            when = true})
          .recv({
            didSend = v70,
            from = v65,
            msg = [],
            secs = v69,
            time = v68}){
            v66 <- fluid balance(0)
            fluid balance(0) := balance(0)/66
            checkPay(0, Nothing);
            const v67 = v55 == v65;
            claim(CT_Require)(v67, Just "sender correct");
            fluid thisConsensusTime := thisConsensusTime/68
            fluid thisConsensusSecs := thisConsensusSecs/69
            fluid didPublish := didPublish/70
            prompt(v71 {impure}) {
              const v72 = 2 * amt/39;
              v73 <- fluid balance(1)
              const v74 = v72 <= balance(1)/73;
              claim(CT_Assert)(v74, Just "balance sufficient for transfer");
              v75 <- fluid balance(1)
              const v76 = balance(1)/75 - v72;
              fluid balance(1) := v76
              transfer.(v72, Just tokX/49).to(v55);
              only("Bob") {
                {
                  const v79 = selfAddress("Bob", False, 78 )();
                  protect<Null>("Bob".interact.didTransfer(true, amt/39 )); } };
              throw(null).to(71); };
            commit();
            only("Alice") {
              {
                 } };
            publish(@?)
              .case("Alice").send({
                isClass = False,
                msg = [],
                pay = [0, ],
                when = true})
              .recv({
                didSend = v86,
                from = v81,
                msg = [],
                secs = v85,
                time = v84}){
                v82 <- fluid balance(0)
                fluid balance(0) := balance(0)/82
                checkPay(0, Nothing);
                const v83 = v33 == v81;
                claim(CT_Require)(v83, Just "sender correct");
                fluid thisConsensusTime := thisConsensusTime/84
                fluid thisConsensusSecs := thisConsensusSecs/85
                fluid didPublish := didPublish/86
                prompt(v87 {impure}) {
                  const v88 = 2 * amt/39;
                  v89 <- fluid balance(1)
                  const v90 = v88 <= balance(1)/89;
                  claim(CT_Assert)(v90, Just "balance sufficient for transfer");
                  v91 <- fluid balance(1)
                  const v92 = balance(1)/91 - v88;
                  fluid balance(1) := v92
                  transfer.(v88, Just tokX/49).to(v33);
                  only("Alice") {
                    {
                      const v95 = selfAddress("Alice", False, 94 )();
                      protect<Null>("Alice".interact.didTransfer(true, amt/39 )); } };
                  throw(null).to(87); };
                commit();
                only("Alice") {
                  {
                    const v97 = 2 * amt/39; } };
                publish(@?)
                  .case("Alice").send({
                    isClass = False,
                    msg = [],
                    pay = [0, (v97, tok1/49 ) ],
                    when = true})
                  .recv({
                    didSend = v106,
                    from = v98,
                    msg = [],
                    secs = v105,
                    time = v104}){
                    const v99 = 2 * amt/39;
                    v100 <- fluid balance(0)
                    fluid balance(0) := balance(0)/100
                    checkPay(0, Nothing);
                    v101 <- fluid balance(1)
                    const v102 = balance(1)/101 + v99;
                    fluid balance(1) := v102
                    checkPay(v99, Just tok1/49);
                    const v103 = v33 == v98;
                    claim(CT_Require)(v103, Just "sender correct");
                    fluid thisConsensusTime := thisConsensusTime/104
                    fluid thisConsensusSecs := thisConsensusSecs/105
                    fluid didPublish := didPublish/106
                    commit();
                    only("Bob") {
                      {
                        const v107 = 2 * amt/39; } };
                    publish(@?)
                      .case("Bob").send({
                        isClass = False,
                        msg = [],
                        pay = [0, (v107, tok1/49 ) ],
                        when = true})
                      .recv({
                        didSend = v116,
                        from = v108,
                        msg = [],
                        secs = v115,
                        time = v114}){
                        const v109 = 2 * amt/39;
                        v110 <- fluid balance(0)
                        fluid balance(0) := balance(0)/110
                        checkPay(0, Nothing);
                        v111 <- fluid balance(1)
                        const v112 = balance(1)/111 + v109;
                        fluid balance(1) := v112
                        checkPay(v109, Just tok1/49);
                        const v113 = v55 == v108;
                        claim(CT_Require)(v113, Just "sender correct");
                        fluid thisConsensusTime := thisConsensusTime/114
                        fluid thisConsensusSecs := thisConsensusSecs/115
                        fluid didPublish := didPublish/116
                        v117 <- fluid balance(1)
                        const v118 = supply/38 <= balance(1)/117;
                        claim(CT_Assert)(v118, Just "Token.burn");
                        v119 <- fluid balance(1)
                        const v120 = balance(1)/119 - supply/38;
                        fluid balance(1) := v120
                        v121 <- fluid supply(1)
                        const v122 = supply(1)/121 - supply/38;
                        fluid supply(1) := v122
                        Token(tok1/49).burn(supply/38);
                        v123 <- fluid destroyed(1)
                        const v124 = (destroyed(1)/123 ? false : true);
                        claim(CT_Assert)(v124, Just "token not yet destroyed at Token.destroy");
                        v125 <- fluid supply(1)
                        const v126 = 0 == supply(1)/125;
                        claim(CT_Assert)(v126, Just "token supply zero at Token.destroy");
                        Token(tok1/49).destroy();
                        fluid destroyed(1) := true
                        const v127 = "                                                                                                ";
                        const v128 = "                                ";
                        const v129 = new Token({
                          decimals = null,
                          metadata = v128,
                          name = name/34,
                          supply = UInt.max,
                          sym = symbol/35,
                          url = v127});
                        const v130 = emitLog(internal)(v129 );
                        fluid balance(2) := UInt.max
                        fluid supply(2) := UInt.max
                        fluid destroyed(2) := false
                        only("Alice") {
                          {
                            const v133 = selfAddress("Alice", False, 132 )();
                            const v135 = {
                              name = name/34,
                              symbol = symbol/35};
                            protect<Null>("Alice".interact.showToken(tok2/130, v135 )); } };
                        only("Bob") {
                          {
                            const v138 = selfAddress("Bob", False, 137 )();
                            const v140 = {
                              name = name/34,
                              symbol = symbol/35};
                            protect<Null>("Bob".interact.showToken(tok2/130, v140 )); } };
                        commit();
                        only("Bob") {
                          {
                             } };
                        publish(@?)
                          .case("Bob").send({
                            isClass = False,
                            msg = [],
                            pay = [0, ],
                            when = true})
                          .recv({
                            didSend = v146,
                            from = v141,
                            msg = [],
                            secs = v145,
                            time = v144}){
                            v142 <- fluid balance(0)
                            fluid balance(0) := balance(0)/142
                            checkPay(0, Nothing);
                            const v143 = v55 == v141;
                            claim(CT_Require)(v143, Just "sender correct");
                            fluid thisConsensusTime := thisConsensusTime/144
                            fluid thisConsensusSecs := thisConsensusSecs/145
                            fluid didPublish := didPublish/146
                            prompt(v147 {impure}) {
                              const v148 = 2 * amt/39;
                              v149 <- fluid balance(2)
                              const v150 = v148 <= balance(2)/149;
                              claim(CT_Assert)(v150, Just "balance sufficient for transfer");
                              v151 <- fluid balance(2)
                              const v152 = balance(2)/151 - v148;
                              fluid balance(2) := v152
                              transfer.(v148, Just tokX/130).to(v55);
                              only("Bob") {
                                {
                                  const v155 = selfAddress("Bob", False, 154 )();
                                  protect<Null>("Bob".interact.didTransfer(true, amt/39 )); } };
                              throw(null).to(147); };
                            commit();
                            only("Alice") {
                              {
                                 } };
                            publish(@?)
                              .case("Alice").send({
                                isClass = False,
                                msg = [],
                                pay = [0, ],
                                when = true})
                              .recv({
                                didSend = v162,
                                from = v157,
                                msg = [],
                                secs = v161,
                                time = v160}){
                                v158 <- fluid balance(0)
                                fluid balance(0) := balance(0)/158
                                checkPay(0, Nothing);
                                const v159 = v33 == v157;
                                claim(CT_Require)(v159, Just "sender correct");
                                fluid thisConsensusTime := thisConsensusTime/160
                                fluid thisConsensusSecs := thisConsensusSecs/161
                                fluid didPublish := didPublish/162
                                prompt(v163 {impure}) {
                                  const v164 = 2 * amt/39;
                                  v165 <- fluid balance(2)
                                  const v166 = v164 <= balance(2)/165;
                                  claim(CT_Assert)(v166, Just "balance sufficient for transfer");
                                  v167 <- fluid balance(2)
                                  const v168 = balance(2)/167 - v164;
                                  fluid balance(2) := v168
                                  transfer.(v164, Just tokX/130).to(v33);
                                  only("Alice") {
                                    {
                                      const v171 = selfAddress("Alice", False, 170 )();
                                      protect<Null>("Alice".interact.didTransfer(true, amt/39 )); } };
                                  throw(null).to(163); };
                                v173 <- fluid balance(2)
                                v174 <- fluid balance(2)
                                const v175 = balance(2)/173 <= balance(2)/174;
                                claim(CT_Assert)(v175, Just "Token.burn");
                                v176 <- fluid balance(2)
                                const v177 = balance(2)/176 - balance(2)/173;
                                fluid balance(2) := v177
                                v178 <- fluid supply(2)
                                const v179 = supply(2)/178 - balance(2)/173;
                                fluid supply(2) := v179
                                Token(tok2/130).burn(balance(2)/173);
                                commit();
                                only("Alice") {
                                  {
                                    const v180 = 2 * amt/39; } };
                                publish(@?)
                                  .case("Alice").send({
                                    isClass = False,
                                    msg = [],
                                    pay = [0, (v180, tok2/130 ) ],
                                    when = true})
                                  .recv({
                                    didSend = v189,
                                    from = v181,
                                    msg = [],
                                    secs = v188,
                                    time = v187}){
                                    const v182 = 2 * amt/39;
                                    v183 <- fluid balance(0)
                                    fluid balance(0) := balance(0)/183
                                    checkPay(0, Nothing);
                                    v184 <- fluid balance(2)
                                    const v185 = balance(2)/184 + v182;
                                    fluid balance(2) := v185
                                    checkPay(v182, Just tok2/130);
                                    const v186 = v33 == v181;
                                    claim(CT_Require)(v186, Just "sender correct");
                                    fluid thisConsensusTime := thisConsensusTime/187
                                    fluid thisConsensusSecs := thisConsensusSecs/188
                                    fluid didPublish := didPublish/189
                                    commit();
                                    only("Bob") {
                                      {
                                        const v190 = 2 * amt/39; } };
                                    publish(@?)
                                      .case("Bob").send({
                                        isClass = False,
                                        msg = [],
                                        pay = [0, (v190, tok2/130 ) ],
                                        when = true})
                                      .recv({
                                        didSend = v199,
                                        from = v191,
                                        msg = [],
                                        secs = v198,
                                        time = v197}){
                                        const v192 = 2 * amt/39;
                                        v193 <- fluid balance(0)
                                        fluid balance(0) := balance(0)/193
                                        checkPay(0, Nothing);
                                        v194 <- fluid balance(2)
                                        const v195 = balance(2)/194 + v192;
                                        fluid balance(2) := v195
                                        checkPay(v192, Just tok2/130);
                                        const v196 = v55 == v191;
                                        claim(CT_Require)(v196, Just "sender correct");
                                        fluid thisConsensusTime := thisConsensusTime/197
                                        fluid thisConsensusSecs := thisConsensusSecs/198
                                        fluid didPublish := didPublish/199
                                        v200 <- fluid balance(2)
                                        v201 <- fluid balance(2)
                                        const v202 = balance(2)/200 <= balance(2)/201;
                                        claim(CT_Assert)(v202, Just "Token.burn");
                                        v203 <- fluid balance(2)
                                        const v204 = balance(2)/203 - balance(2)/200;
                                        fluid balance(2) := v204
                                        v205 <- fluid supply(2)
                                        const v206 = supply(2)/205 - balance(2)/200;
                                        fluid supply(2) := v206
                                        Token(tok2/130).burn(balance(2)/200);
                                        v207 <- fluid destroyed(2)
                                        const v208 = (destroyed(2)/207 ? false : true);
                                        claim(CT_Assert)(v208, Just "token not yet destroyed at Token.destroy");
                                        v209 <- fluid supply(2)
                                        const v210 = 0 == supply(2)/209;
                                        claim(CT_Assert)(v210, Just "token supply zero at Token.destroy");
                                        Token(tok2/130).destroy();
                                        fluid destroyed(2) := true
                                        commit();
                                        v211 <- fluid balance(0)
                                        const v212 = 0 == balance(0)/211;
                                        claim(CT_Assert)(v212, Just "balance zero at application exit");
                                        v213 <- fluid balance(1)
                                        const v214 = 0 == balance(1)/213;
                                        claim(CT_Assert)(v214, Just "balance zero at application exit");
                                        v215 <- fluid balance(2)
                                        const v216 = 0 == balance(2)/215;
                                        claim(CT_Assert)(v216, Just "balance zero at application exit");
                                        v217 <- fluid destroyed(1)
                                        const v218 = (destroyed(1)/217 ? false : true);
                                        claim(CT_Assert)(destroyed(1)/217, Just "token destroyed at application exit");
                                        v219 <- fluid destroyed(2)
                                        const v220 = (destroyed(2)/219 ? false : true);
                                        claim(CT_Assert)(destroyed(2)/219, Just "token destroyed at application exit");
                                        exit(); }
                                       }
                                   }
                               }
                           }
                       }
                   }
               }
           }
       }
  