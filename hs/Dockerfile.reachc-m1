ARG UBUNTU_IMAGE
ARG SOLC_IMAGE
FROM $SOLC_IMAGE as solc
RUN apk add make curl bash
COPY Makefile.docker ./Makefile
COPY sol/stdlib_reach.sol sol/stdlib_openzep.sol.sh ./sol/
COPY .docker-root ./.docker-root
RUN make ROOT=.docker-root sol/stdlib.json

FROM reachsh/devnet-algo:latest AS algo

FROM $UBUNTU_IMAGE

RUN set -e
RUN apt-get update \
  && apt-get install -y \
    curl \
    gcc \
    git \
    libnuma-dev \
    llvm \
    make \
    python3 \
    wget \
    xz-utils \
    z3 \
    zlib1g-dev

WORKDIR /tmp

RUN curl https://downloads.haskell.org/~ghc/8.10.7/ghc-8.10.7-aarch64-deb10-linux.tar.xz \
  -o ghc.tar.xz \
 && mkdir ghc/ \
 && tar -xvf ghc.tar.xz -C ghc/ \
 && cd ghc/ghc-8.10.7/ \
 && ./configure \
 && make install \
 && cd ../.. \
 && rm -r ghc/ \
 && rm ghc.tar.xz

RUN curl -sSL https://github.com/commercialhaskell/stack/releases/download/v2.7.1/stack-2.7.1-linux-aarch64.bin > /usr/local/bin/stack && chmod +x /usr/local/bin/stack

ENV LANG=C.UTF-8

RUN mkdir /tmp/hs
WORKDIR /tmp/hs

# mostly copied form haskell-build-artifacts
COPY .docker-root ./.docker-root
COPY Makefile.docker ./Makefile
COPY package.mo.yaml ./
RUN make ROOT=.docker-root package.yaml

# stack.yaml.lock intentionally omitted
COPY stack.yaml ./
RUN echo 'compiler: ghc-8.10.7' >> stack.yaml \
 && echo 'system-ghc: true'     >> stack.yaml
RUN stack update
RUN stack build --dependencies-only
COPY hie.yaml Setup.hs ./
ADD app ./app/
ADD rsh ./rsh/
ADD smt2 ./smt2/
COPY --from=solc ./sol/stdlib.sol ./sol/stdlib.sol
ADD src ./src/
ADD test ./test/

RUN make ROOT=.docker-root src/Reach/Version.hs

SHELL ["/bin/bash", "-c"]
RUN set -o pipefail ; stack build 2>&1 | tee build-log.txt
RUN stack build --copy-bins
# RUN mv "$(stack path --local-install-root)/bin" /build/bin/

RUN apt-get update && apt-get install -y \
  python3-distutils \
  clang

WORKDIR /tmp_z3
ARG Z3_VERSION
ENV Z3_VERSION=${Z3_VERSION}
# ENV Z3_SYS x64-glibc-2.31
# RUN wget -O /tmp/z3.zip \
#      https://github.com/Z3Prover/z3/releases/download/z3-${Z3_VERSION}/z3-${Z3_VERSION}-${Z3_SYS}.zip \
#   && unzip -p /tmp/z3.zip z3-${Z3_VERSION}-${Z3_SYS}/bin/z3 | cat > /usr/bin/z3 \
#   && rm /tmp/z3.zip
RUN git clone https://github.com/Z3Prover/z3

WORKDIR /tmp_z3/z3
RUN git checkout "z3-${Z3_VERSION}"
RUN python3 scripts/mk_make.py
WORKDIR /tmp_z3/z3/build
RUN make
RUN make install

WORKDIR /
COPY --from=solc /usr/local/bin/solc /usr/bin/solc
RUN chmod +x /usr/bin/solc
COPY --from=solc /sol/stdlib.json /stdlib_sol.json
RUN cp /root/.local/bin/reachc /usr/bin/reachc && chmod +x /usr/bin/reachc

# this particular goal binary needs musl
RUN apt-get update && apt-get install -y musl
COPY --from=algo /bin/goal /usr/bin/goal

# mostly copied from Dockerfile.reachc
WORKDIR /app
ENTRYPOINT ["/usr/bin/reachc"]
ARG REACH_GIT_HASH
ENV REACH_GIT_HASH="${REACH_GIT_HASH}"
ENV REACHC_HASH="${REACH_GIT_HASH}"

# TODO: cut down image size
