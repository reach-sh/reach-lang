Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/62 = <loop variable>;
  //    ^ could = [7719, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/69 = <loop variable>;
  //    ^ could = 7719
  //      from: ./loop_var_sub.rsh:14:7:while

  // Theorem Formalization

  const v116 = (balance(0)/69 + 1) == [(x/62[0] + 2), x/62[1] ][0];
  //    ^ would be false
  assert(v116);

  Verifying when NO participants are honest
Verification failed:
  when NO participants are honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/62 = <loop variable>;
  //    ^ could = [7719, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/69 = <loop variable>;
  //    ^ could = 7719
  //      from: ./loop_var_sub.rsh:14:7:while

  // Theorem Formalization

  const v148 = (balance(0)/69 + 1) == [(x/62[0] + 2), x/62[1] ][0];
  //    ^ would be false
  assert(v148);

  Verifying when ONLY "A" is honest
Verification failed:
  when ONLY "A" is honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/62 = <loop variable>;
  //    ^ could = [7719, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/69 = <loop variable>;
  //    ^ could = 7719
  //      from: ./loop_var_sub.rsh:14:7:while

  // Theorem Formalization

  const v180 = (balance(0)/69 + 1) == [(x/62[0] + 2), x/62[1] ][0];
  //    ^ would be false
  assert(v180);

  Verifying when ONLY "B" is honest
Verification failed:
  when ONLY "B" is honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/62 = <loop variable>;
  //    ^ could = [7719, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/69 = <loop variable>;
  //    ^ could = 7719
  //      from: ./loop_var_sub.rsh:14:7:while

  // Theorem Formalization

  const v212 = (balance(0)/69 + 1) == [(x/62[0] + 2), x/62[1] ][0];
  //    ^ would be false
  assert(v212);

Checked 21 theorems; 4 failures :'(
