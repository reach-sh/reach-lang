Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/50 = <loop variable>;
  //    ^ could = [38, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/53 = <loop variable>;
  //    ^ could = 38
  //      from: ./loop_var_sub.rsh:14:7:while

  // Theorem Formalization

  const v87 = (balance(0)/53 + 1) == [(x/50[0] + 2), x/50[1] ][0];
  //    ^ would be false
  assert(v87);

  Verifying when NO participants are honest
Verification failed:
  when NO participants are honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/50 = <loop variable>;
  //    ^ could = [38, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/53 = <loop variable>;
  //    ^ could = 38
  //      from: ./loop_var_sub.rsh:14:7:while

  // Theorem Formalization

  const v106 = (balance(0)/53 + 1) == [(x/50[0] + 2), x/50[1] ][0];
  //    ^ would be false
  assert(v106);

  Verifying when ONLY "A" is honest
Verification failed:
  when ONLY "A" is honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/50 = <loop variable>;
  //    ^ could = [38, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/53 = <loop variable>;
  //    ^ could = 38
  //      from: ./loop_var_sub.rsh:14:7:while

  // Theorem Formalization

  const v125 = (balance(0)/53 + 1) == [(x/50[0] + 2), x/50[1] ][0];
  //    ^ would be false
  assert(v125);

  Verifying when ONLY "B" is honest
Verification failed:
  when ONLY "B" is honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/50 = <loop variable>;
  //    ^ could = [38, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/53 = <loop variable>;
  //    ^ could = 38
  //      from: ./loop_var_sub.rsh:14:7:while

  // Theorem Formalization

  const v144 = (balance(0)/53 + 1) == [(x/50[0] + 2), x/50[1] ][0];
  //    ^ would be false
  assert(v144);

Checked 18 theorems; 4 failures :'(
