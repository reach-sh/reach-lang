Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/23 = <loop variable>;
  //    ^ could = [0, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/45 = <loop variable>;
  //    ^ could = 0
  //      from: ./loop_var_sub.rsh:14:7:while


  // Theorem Formalization

  const v64 = (balance(0)/45 + 1) == [(x/23[0] + 2), x/23[1] ][0];
  //    ^ would be false
  while invariant after loop(v64);

  Verifying when NO participants are honest
Verification failed:
  when NO participants are honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/23 = <loop variable>;
  //    ^ could = [0, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/45 = <loop variable>;
  //    ^ could = 0
  //      from: ./loop_var_sub.rsh:14:7:while


  // Theorem Formalization

  const v83 = (balance(0)/45 + 1) == [(x/23[0] + 2), x/23[1] ][0];
  //    ^ would be false
  while invariant after loop(v83);

  Verifying when ONLY "A" is honest
Verification failed:
  when ONLY "A" is honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/23 = <loop variable>;
  //    ^ could = [0, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/45 = <loop variable>;
  //    ^ could = 0
  //      from: ./loop_var_sub.rsh:14:7:while


  // Theorem Formalization

  const v102 = (balance(0)/45 + 1) == [(x/23[0] + 2), x/23[1] ][0];
  //    ^ would be false
  while invariant after loop(v102);

  Verifying when ONLY "B" is honest
Verification failed:
  when ONLY "B" is honest
  of theorem: while invariant after loop
  at ./loop_var_sub.rsh:13:7:invariant

  // Violation Witness

  const x/23 = <loop variable>;
  //    ^ could = [0, false ]
  //      from: ./loop_var_sub.rsh:14:7:while
  const balance(0)/45 = <loop variable>;
  //    ^ could = 0
  //      from: ./loop_var_sub.rsh:14:7:while


  // Theorem Formalization

  const v121 = (balance(0)/45 + 1) == [(x/23[0] + 2), x/23[1] ][0];
  //    ^ would be false
  while invariant after loop(v121);

Checked 18 theorems; 4 failures. :'(
