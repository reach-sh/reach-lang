Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail1.rsh:65:15:application

  // Violation Witness

  const UInt.max = 1;

  const v337 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 1, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail1.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/330 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/331 = array(Tuple(UInt, UInt, Bool), [initialInfo/330, initialInfo/330 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/381 = tokInfos/331[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/386 = Array.set(tokInfos/331, 0, [v337.supply, tokInfo/381[1], tokInfo/381[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 0, false ] ] )
  const tokInfo/388 = tokInfos'/386[0];
  //    ^ would be [1, 0, false ]
  const tokInfos'/393 = Array.set(tokInfos'/386, 0, [tokInfo/388[0], v337.supply, tokInfo/388[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/394 = tokInfos'/393[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/399 = Array.set(tokInfos'/393, 0, [tokInfo/394[0], tokInfo/394[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const v411 = 2 * v337.amt;
  //    ^ would be 0
  const tokInfo/412 = tokInfos'/399[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/425 = Array.set(tokInfos'/399, 0, [(tokInfo/412[0] - v411), tokInfo/412[1], tokInfo/412[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/429 = tokInfos'/425[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/442 = Array.set(tokInfos'/425, 0, [(tokInfo/429[0] - v411), tokInfo/429[1], tokInfo/429[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/451 = tokInfos'/442[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/461 = Array.set(tokInfos'/442, 0, [(tokInfo/451[0] + v411), tokInfo/451[1], tokInfo/451[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/468 = tokInfos'/461[0];
  //    ^ would be [1, 1, false ]
  const v485 = 0 == Array.set(tokInfos'/461, 0, [(tokInfo/468[0] + v411), tokInfo/468[1], tokInfo/468[2] ] )[0][1];
  //    ^ would be false
  assert(v485);

Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token destroyed at application exit"
  at ./mint-fail1.rsh:78:7:application

  // Violation Witness

  const v337 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 0, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail1.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/330 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/331 = array(Tuple(UInt, UInt, Bool), [initialInfo/330, initialInfo/330 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/381 = tokInfos/331[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/386 = Array.set(tokInfos/331, 0, [v337.supply, tokInfo/381[1], tokInfo/381[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/388 = tokInfos'/386[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/393 = Array.set(tokInfos'/386, 0, [tokInfo/388[0], v337.supply, tokInfo/388[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/394 = tokInfos'/393[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/399 = Array.set(tokInfos'/393, 0, [tokInfo/394[0], tokInfo/394[1], false ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const v411 = 2 * v337.amt;
  //    ^ would be 0
  const tokInfo/412 = tokInfos'/399[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/425 = Array.set(tokInfos'/399, 0, [(tokInfo/412[0] - v411), tokInfo/412[1], tokInfo/412[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/429 = tokInfos'/425[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/442 = Array.set(tokInfos'/425, 0, [(tokInfo/429[0] - v411), tokInfo/429[1], tokInfo/429[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/451 = tokInfos'/442[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/461 = Array.set(tokInfos'/442, 0, [(tokInfo/451[0] + v411), tokInfo/451[1], tokInfo/451[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/468 = tokInfos'/461[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/478 = Array.set(tokInfos'/461, 0, [(tokInfo/468[0] + v411), tokInfo/468[1], tokInfo/468[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/480 = tokInfos'/478[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/491 = Array.set(tokInfos'/478, 0, [tokInfo/480[0], tokInfo/480[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/505 = tokInfos'/491[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/510 = Array.set(tokInfos'/491, 1, [UInt.max, tokInfo/505[1], tokInfo/505[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/512 = tokInfos'/510[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/517 = Array.set(tokInfos'/510, 1, [tokInfo/512[0], UInt.max, tokInfo/512[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/518 = tokInfos'/517[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/523 = Array.set(tokInfos'/517, 1, [tokInfo/518[0], tokInfo/518[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/533 = tokInfos'/523[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/546 = Array.set(tokInfos'/523, 1, [(tokInfo/533[0] - v411), tokInfo/533[1], tokInfo/533[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/550 = tokInfos'/546[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/563 = Array.set(tokInfos'/546, 1, [(tokInfo/550[0] - v411), tokInfo/550[1], tokInfo/550[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/567 = tokInfos'/563[1];
  //    ^ would be [0, 0, false ]
  const v568 = tokInfo/567[0];
  //    ^ would be 0
  const tokInfos'/582 = Array.set(tokInfos'/563, 1, [(v568 - v568), tokInfo/567[1], tokInfo/567[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/583 = tokInfos'/582[1];
  //    ^ would be [0, 0, false ]
  const v604 = Array.set(tokInfos'/582, 1, [tokInfo/583[0], (tokInfo/583[1] - v568), tokInfo/583[2] ] )[1][2];
  //    ^ would be false
  assert(v604);

  Verifying when NO participants are honest
Checked 46 theorems; 4 failures (and 2 omitted repeats) :'(
