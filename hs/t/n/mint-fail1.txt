Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail1.rsh:65:15:application

  // Violation Witness

  const UInt.max = 1;

  const v327 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 1, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail1.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/320 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/321 = array(Tuple(UInt, UInt, Bool), [initialInfo/320, initialInfo/320 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/371 = tokInfos/321[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/376 = Array.set(tokInfos/321, 0, [v327.supply, tokInfo/371[1], tokInfo/371[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 0, false ] ] )
  const tokInfo/378 = tokInfos'/376[0];
  //    ^ would be [1, 0, false ]
  const tokInfos'/383 = Array.set(tokInfos'/376, 0, [tokInfo/378[0], v327.supply, tokInfo/378[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/384 = tokInfos'/383[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/389 = Array.set(tokInfos'/383, 0, [tokInfo/384[0], tokInfo/384[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const v401 = 2 * v327.amt;
  //    ^ would be 0
  const tokInfo/402 = tokInfos'/389[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/413 = Array.set(tokInfos'/389, 0, [(tokInfo/402[0] - v401), tokInfo/402[1], tokInfo/402[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/417 = tokInfos'/413[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/428 = Array.set(tokInfos'/413, 0, [(tokInfo/417[0] - v401), tokInfo/417[1], tokInfo/417[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/437 = tokInfos'/428[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/447 = Array.set(tokInfos'/428, 0, [(tokInfo/437[0] + v401), tokInfo/437[1], tokInfo/437[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/454 = tokInfos'/447[0];
  //    ^ would be [1, 1, false ]
  const v471 = 0 == Array.set(tokInfos'/447, 0, [(tokInfo/454[0] + v401), tokInfo/454[1], tokInfo/454[2] ] )[0][1];
  //    ^ would be false
  assert(v471);

Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token destroyed at application exit"
  at ./mint-fail1.rsh:78:7:application

  // Violation Witness

  const v327 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 0, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail1.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/320 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/321 = array(Tuple(UInt, UInt, Bool), [initialInfo/320, initialInfo/320 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/371 = tokInfos/321[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/376 = Array.set(tokInfos/321, 0, [v327.supply, tokInfo/371[1], tokInfo/371[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/378 = tokInfos'/376[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/383 = Array.set(tokInfos'/376, 0, [tokInfo/378[0], v327.supply, tokInfo/378[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/384 = tokInfos'/383[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/389 = Array.set(tokInfos'/383, 0, [tokInfo/384[0], tokInfo/384[1], false ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const v401 = 2 * v327.amt;
  //    ^ would be 0
  const tokInfo/402 = tokInfos'/389[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/413 = Array.set(tokInfos'/389, 0, [(tokInfo/402[0] - v401), tokInfo/402[1], tokInfo/402[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/417 = tokInfos'/413[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/428 = Array.set(tokInfos'/413, 0, [(tokInfo/417[0] - v401), tokInfo/417[1], tokInfo/417[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/437 = tokInfos'/428[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/447 = Array.set(tokInfos'/428, 0, [(tokInfo/437[0] + v401), tokInfo/437[1], tokInfo/437[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/454 = tokInfos'/447[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/464 = Array.set(tokInfos'/447, 0, [(tokInfo/454[0] + v401), tokInfo/454[1], tokInfo/454[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/466 = tokInfos'/464[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/477 = Array.set(tokInfos'/464, 0, [tokInfo/466[0], tokInfo/466[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/491 = tokInfos'/477[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/496 = Array.set(tokInfos'/477, 1, [UInt.max, tokInfo/491[1], tokInfo/491[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/498 = tokInfos'/496[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/503 = Array.set(tokInfos'/496, 1, [tokInfo/498[0], UInt.max, tokInfo/498[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/504 = tokInfos'/503[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/509 = Array.set(tokInfos'/503, 1, [tokInfo/504[0], tokInfo/504[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/519 = tokInfos'/509[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/530 = Array.set(tokInfos'/509, 1, [(tokInfo/519[0] - v401), tokInfo/519[1], tokInfo/519[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/534 = tokInfos'/530[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/545 = Array.set(tokInfos'/530, 1, [(tokInfo/534[0] - v401), tokInfo/534[1], tokInfo/534[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/549 = tokInfos'/545[1];
  //    ^ would be [0, 0, false ]
  const v550 = tokInfo/549[0];
  //    ^ would be 0
  const tokInfos'/562 = Array.set(tokInfos'/545, 1, [(v550 - v550), tokInfo/549[1], tokInfo/549[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/563 = tokInfos'/562[1];
  //    ^ would be [0, 0, false ]
  const v584 = Array.set(tokInfos'/562, 1, [tokInfo/563[0], (tokInfo/563[1] - v550), tokInfo/563[2] ] )[1][2];
  //    ^ would be false
  assert(v584);

  Verifying when NO participants are honest
Checked 46 theorems; 4 failures (and 2 omitted repeats) :'(
