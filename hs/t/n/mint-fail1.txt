Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail1.rsh:65:15:application

  // Violation Witness

  const UInt.max = 1;

  const v314 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 1, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail1.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/307 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/308 = array(Tuple(UInt, UInt, Bool), [initialInfo/307, initialInfo/307 ]);
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/350 = tokInfos/308[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/355 = Array.set(tokInfos/308, 0, [v314.supply, tokInfo/350[1], tokInfo/350[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 0, false ] ] )
  const tokInfo/357 = tokInfos'/355[0];
  //    ^ would be [1, 0, false ]
  const tokInfos'/362 = Array.set(tokInfos'/355, 0, [tokInfo/357[0], v314.supply, tokInfo/357[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/363 = tokInfos'/362[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/368 = Array.set(tokInfos'/362, 0, [tokInfo/363[0], tokInfo/363[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const v380 = 2 * v314.amt;
  //    ^ would be 0
  const tokInfo/381 = tokInfos'/368[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/392 = Array.set(tokInfos'/368, 0, [(tokInfo/381[0] - v380), tokInfo/381[1], tokInfo/381[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/396 = tokInfos'/392[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/407 = Array.set(tokInfos'/392, 0, [(tokInfo/396[0] - v380), tokInfo/396[1], tokInfo/396[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/416 = tokInfos'/407[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/424 = Array.set(tokInfos'/407, 0, [(tokInfo/416[0] + v380), tokInfo/416[1], tokInfo/416[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/431 = tokInfos'/424[0];
  //    ^ would be [1, 1, false ]
  const v446 = 0 == Array.set(tokInfos'/424, 0, [(tokInfo/431[0] + v380), tokInfo/431[1], tokInfo/431[2] ] )[0][1];
  //    ^ would be false
  assert(v446);

Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token destroyed at application exit"
  at ./mint-fail1.rsh:78:7:application

  // Violation Witness

  const v314 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 0, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail1.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/307 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/308 = array(Tuple(UInt, UInt, Bool), [initialInfo/307, initialInfo/307 ]);
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/350 = tokInfos/308[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/355 = Array.set(tokInfos/308, 0, [v314.supply, tokInfo/350[1], tokInfo/350[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/357 = tokInfos'/355[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/362 = Array.set(tokInfos'/355, 0, [tokInfo/357[0], v314.supply, tokInfo/357[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/363 = tokInfos'/362[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/368 = Array.set(tokInfos'/362, 0, [tokInfo/363[0], tokInfo/363[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const v380 = 2 * v314.amt;
  //    ^ would be 0
  const tokInfo/381 = tokInfos'/368[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/392 = Array.set(tokInfos'/368, 0, [(tokInfo/381[0] - v380), tokInfo/381[1], tokInfo/381[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/396 = tokInfos'/392[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/407 = Array.set(tokInfos'/392, 0, [(tokInfo/396[0] - v380), tokInfo/396[1], tokInfo/396[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/416 = tokInfos'/407[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/424 = Array.set(tokInfos'/407, 0, [(tokInfo/416[0] + v380), tokInfo/416[1], tokInfo/416[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/431 = tokInfos'/424[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/439 = Array.set(tokInfos'/424, 0, [(tokInfo/431[0] + v380), tokInfo/431[1], tokInfo/431[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/441 = tokInfos'/439[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/452 = Array.set(tokInfos'/439, 0, [tokInfo/441[0], tokInfo/441[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/465 = tokInfos'/452[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/470 = Array.set(tokInfos'/452, 1, [UInt.max, tokInfo/465[1], tokInfo/465[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/472 = tokInfos'/470[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/477 = Array.set(tokInfos'/470, 1, [tokInfo/472[0], UInt.max, tokInfo/472[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/478 = tokInfos'/477[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/483 = Array.set(tokInfos'/477, 1, [tokInfo/478[0], tokInfo/478[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/493 = tokInfos'/483[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/504 = Array.set(tokInfos'/483, 1, [(tokInfo/493[0] - v380), tokInfo/493[1], tokInfo/493[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/508 = tokInfos'/504[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/519 = Array.set(tokInfos'/504, 1, [(tokInfo/508[0] - v380), tokInfo/508[1], tokInfo/508[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/523 = tokInfos'/519[1];
  //    ^ would be [0, 0, false ]
  const v524 = tokInfo/523[0];
  //    ^ would be 0
  const tokInfos'/536 = Array.set(tokInfos'/519, 1, [(v524 - v524), tokInfo/523[1], tokInfo/523[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/537 = tokInfos'/536[1];
  //    ^ would be [0, 0, false ]
  const v558 = Array.set(tokInfos'/536, 1, [tokInfo/537[0], (tokInfo/537[1] - v524), tokInfo/537[2] ] )[1][2];
  //    ^ would be false
  assert(v558);

  Verifying when NO participants are honest
Checked 46 theorems; 4 failures (and 2 omitted repeats) :'(
