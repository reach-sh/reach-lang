Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail1.rsh:65:15:application

  // Violation Witness

  const UInt.max = 1;

  const v325 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 1, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail1.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/318 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/319 = array(Tuple(UInt, UInt, Bool), [initialInfo/318, initialInfo/318 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/369 = tokInfos/319[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/374 = Array.set(tokInfos/319, 0, [v325.supply, tokInfo/369[1], tokInfo/369[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 0, false ] ] )
  const tokInfo/376 = tokInfos'/374[0];
  //    ^ would be [1, 0, false ]
  const tokInfos'/381 = Array.set(tokInfos'/374, 0, [tokInfo/376[0], v325.supply, tokInfo/376[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/382 = tokInfos'/381[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/387 = Array.set(tokInfos'/381, 0, [tokInfo/382[0], tokInfo/382[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const v399 = 2 * v325.amt;
  //    ^ would be 0
  const tokInfo/400 = tokInfos'/387[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/411 = Array.set(tokInfos'/387, 0, [(tokInfo/400[0] - v399), tokInfo/400[1], tokInfo/400[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/415 = tokInfos'/411[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/426 = Array.set(tokInfos'/411, 0, [(tokInfo/415[0] - v399), tokInfo/415[1], tokInfo/415[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/435 = tokInfos'/426[0];
  //    ^ would be [1, 1, false ]
  const tokInfos'/443 = Array.set(tokInfos'/426, 0, [(tokInfo/435[0] + v399), tokInfo/435[1], tokInfo/435[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[1, 1, false ] ] )
  const tokInfo/450 = tokInfos'/443[0];
  //    ^ would be [1, 1, false ]
  const v465 = 0 == Array.set(tokInfos'/443, 0, [(tokInfo/450[0] + v399), tokInfo/450[1], tokInfo/450[2] ] )[0][1];
  //    ^ would be false
  assert(v465);

Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token destroyed at application exit"
  at ./mint-fail1.rsh:78:7:application

  // Violation Witness

  const v325 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 0, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail1.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/318 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/319 = array(Tuple(UInt, UInt, Bool), [initialInfo/318, initialInfo/318 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/369 = tokInfos/319[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/374 = Array.set(tokInfos/319, 0, [v325.supply, tokInfo/369[1], tokInfo/369[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/376 = tokInfos'/374[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/381 = Array.set(tokInfos'/374, 0, [tokInfo/376[0], v325.supply, tokInfo/376[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/382 = tokInfos'/381[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/387 = Array.set(tokInfos'/381, 0, [tokInfo/382[0], tokInfo/382[1], false ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const v399 = 2 * v325.amt;
  //    ^ would be 0
  const tokInfo/400 = tokInfos'/387[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/411 = Array.set(tokInfos'/387, 0, [(tokInfo/400[0] - v399), tokInfo/400[1], tokInfo/400[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/415 = tokInfos'/411[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/426 = Array.set(tokInfos'/411, 0, [(tokInfo/415[0] - v399), tokInfo/415[1], tokInfo/415[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/435 = tokInfos'/426[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/443 = Array.set(tokInfos'/426, 0, [(tokInfo/435[0] + v399), tokInfo/435[1], tokInfo/435[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/450 = tokInfos'/443[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/458 = Array.set(tokInfos'/443, 0, [(tokInfo/450[0] + v399), tokInfo/450[1], tokInfo/450[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/460 = tokInfos'/458[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/471 = Array.set(tokInfos'/458, 0, [tokInfo/460[0], tokInfo/460[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/485 = tokInfos'/471[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/490 = Array.set(tokInfos'/471, 1, [UInt.max, tokInfo/485[1], tokInfo/485[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/494 = tokInfos'/490[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/499 = Array.set(tokInfos'/490, 1, [tokInfo/494[0], UInt.max, tokInfo/494[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/500 = tokInfos'/499[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/505 = Array.set(tokInfos'/499, 1, [tokInfo/500[0], tokInfo/500[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/515 = tokInfos'/505[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/526 = Array.set(tokInfos'/505, 1, [(tokInfo/515[0] - v399), tokInfo/515[1], tokInfo/515[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/530 = tokInfos'/526[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/541 = Array.set(tokInfos'/526, 1, [(tokInfo/530[0] - v399), tokInfo/530[1], tokInfo/530[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/545 = tokInfos'/541[1];
  //    ^ would be [0, 0, false ]
  const v546 = tokInfo/545[0];
  //    ^ would be 0
  const tokInfos'/558 = Array.set(tokInfos'/541, 1, [(v546 - v546), tokInfo/545[1], tokInfo/545[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/559 = tokInfos'/558[1];
  //    ^ would be [0, 0, false ]
  const v580 = Array.set(tokInfos'/558, 1, [tokInfo/559[0], (tokInfo/559[1] - v546), tokInfo/559[2] ] )[1][2];
  //    ^ would be false
  assert(v580);

  Verifying when NO participants are honest
Checked 42 theorems; 4 failures (and 2 omitted repeats) :'(
