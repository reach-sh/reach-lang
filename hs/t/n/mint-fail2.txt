Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail2.rsh:77:15:application

  // Violation Witness

  const UInt.max = 35424;

  const v347 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 8856, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 35424, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail2.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/340 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/341 = array(Tuple(UInt, UInt, Bool), [initialInfo/340, initialInfo/340 ]);
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/383 = tokInfos/341[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/388 = Array.set(tokInfos/341, 0, [v347.supply, tokInfo/383[1], tokInfo/383[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 0, false ] ] )
  const tokInfo/390 = tokInfos'/388[0];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/395 = Array.set(tokInfos'/388, 0, [tokInfo/390[0], v347.supply, tokInfo/390[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/396 = tokInfos'/395[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/401 = Array.set(tokInfos'/395, 0, [tokInfo/396[0], tokInfo/396[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v413 = 2 * v347.amt;
  //    ^ would be 17712
  const tokInfo/414 = tokInfos'/401[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/425 = Array.set(tokInfos'/401, 0, [(tokInfo/414[0] - v413), tokInfo/414[1], tokInfo/414[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/429 = tokInfos'/425[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/440 = Array.set(tokInfos'/425, 0, [(tokInfo/429[0] - v413), tokInfo/429[1], tokInfo/429[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/449 = tokInfos'/440[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/457 = Array.set(tokInfos'/440, 0, [(tokInfo/449[0] + v413), tokInfo/449[1], tokInfo/449[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/464 = tokInfos'/457[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/472 = Array.set(tokInfos'/457, 0, [(tokInfo/464[0] + v413), tokInfo/464[1], tokInfo/464[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/474 = tokInfos'/472[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/485 = Array.set(tokInfos'/472, 0, [(tokInfo/474[0] - v347.supply), tokInfo/474[1], tokInfo/474[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/486 = tokInfos'/485[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/494 = Array.set(tokInfos'/485, 0, [tokInfo/486[0], (tokInfo/486[1] - v347.supply), tokInfo/486[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/495 = tokInfos'/494[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/506 = Array.set(tokInfos'/494, 0, [tokInfo/495[0], tokInfo/495[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/519 = tokInfos'/506[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/524 = Array.set(tokInfos'/506, 1, [UInt.max, tokInfo/519[1], tokInfo/519[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 0, false ] ] )
  const tokInfo/526 = tokInfos'/524[1];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/531 = Array.set(tokInfos'/524, 1, [tokInfo/526[0], UInt.max, tokInfo/526[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/532 = tokInfos'/531[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/537 = Array.set(tokInfos'/531, 1, [tokInfo/532[0], tokInfo/532[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/547 = tokInfos'/537[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/558 = Array.set(tokInfos'/537, 1, [(tokInfo/547[0] - v413), tokInfo/547[1], tokInfo/547[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [17712, 35424, false ] ] )
  const tokInfo/562 = tokInfos'/558[1];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/573 = Array.set(tokInfos'/558, 1, [(tokInfo/562[0] - v413), tokInfo/562[1], tokInfo/562[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/577 = tokInfos'/573[1];
  //    ^ would be [0, 35424, false ]
  const v578 = tokInfo/577[0];
  //    ^ would be 0
  const tokInfos'/590 = Array.set(tokInfos'/573, 1, [(v578 - v578), tokInfo/577[1], tokInfo/577[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/591 = tokInfos'/590[1];
  //    ^ would be [0, 35424, false ]
  const v605 = 0 == Array.set(tokInfos'/590, 1, [tokInfo/591[0], (tokInfo/591[1] - v578), tokInfo/591[2] ] )[1][1];
  //    ^ would be false
  assert(v605);

  Verifying when NO participants are honest
Checked 52 theorems; 2 failures (and 1 omitted repeats) :'(
