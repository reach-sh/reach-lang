Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail2.rsh:77:15:application

  // Violation Witness

  const UInt.max = 35424;

  const v304 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 8856, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 35424, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail2.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/297 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/298 = array(Tuple(UInt, UInt, Bool), [initialInfo/297, initialInfo/297 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfos'/350 = Array.set(tokInfos/298, 0, Tuple.set(tokInfos/298[0], 0, v304.supply ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 0, false ] ] )
  const tokInfos'/354 = Array.set(tokInfos'/350, 0, Tuple.set(tokInfos'/350[0], 1, v304.supply ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfos'/357 = Array.set(tokInfos'/354, 0, Tuple.set(tokInfos'/354[0], 2, false ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v369 = 2 * v304.amt;
  //    ^ would be 17712
  const tokInfo/370 = tokInfos'/357[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/378 = Array.set(tokInfos'/357, 0, Tuple.set(tokInfo/370, 0, (tokInfo/370[0] - v369) ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/382 = tokInfos'/378[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/390 = Array.set(tokInfos'/378, 0, Tuple.set(tokInfo/382, 0, (tokInfo/382[0] - v369) ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/399 = tokInfos'/390[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/404 = Array.set(tokInfos'/390, 0, Tuple.set(tokInfo/399, 0, (tokInfo/399[0] + v369) ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/411 = tokInfos'/404[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/416 = Array.set(tokInfos'/404, 0, Tuple.set(tokInfo/411, 0, (tokInfo/411[0] + v369) ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/418 = tokInfos'/416[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/426 = Array.set(tokInfos'/416, 0, Tuple.set(tokInfo/418, 0, (tokInfo/418[0] - v304.supply) ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/427 = tokInfos'/426[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/432 = Array.set(tokInfos'/426, 0, Tuple.set(tokInfo/427, 1, (tokInfo/427[1] - v304.supply) ) );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfos'/441 = Array.set(tokInfos'/432, 0, Tuple.set(tokInfos'/432[0], 2, true ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfos'/457 = Array.set(tokInfos'/441, 1, Tuple.set(tokInfos'/441[1], 0, UInt.max ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 0, false ] ] )
  const tokInfos'/463 = Array.set(tokInfos'/457, 1, Tuple.set(tokInfos'/457[1], 1, UInt.max ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfos'/466 = Array.set(tokInfos'/463, 1, Tuple.set(tokInfos'/463[1], 2, false ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/476 = tokInfos'/466[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/484 = Array.set(tokInfos'/466, 1, Tuple.set(tokInfo/476, 0, (tokInfo/476[0] - v369) ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [17712, 35424, false ] ] )
  const tokInfo/488 = tokInfos'/484[1];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/496 = Array.set(tokInfos'/484, 1, Tuple.set(tokInfo/488, 0, (tokInfo/488[0] - v369) ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/500 = tokInfos'/496[1];
  //    ^ would be [0, 35424, false ]
  const v501 = tokInfo/500[0];
  //    ^ would be 0
  const tokInfos'/510 = Array.set(tokInfos'/496, 1, Tuple.set(tokInfo/500, 0, (v501 - v501) ) );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/511 = tokInfos'/510[1];
  //    ^ would be [0, 35424, false ]
  const v522 = 0 == Array.set(tokInfos'/510, 1, Tuple.set(tokInfo/511, 1, (tokInfo/511[1] - v501) ) )[1][1];
  //    ^ would be false
  assert(v522);

  Verifying when NO participants are honest
Checked 48 theorems; 2 failures (and 1 omitted repeats) :'(
