Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail2.rsh:77:15:application

  // Violation Witness

  const UInt.max = 35424;

  const v358 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 8856, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 35424, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail2.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/351 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/352 = array(Tuple(UInt, UInt, Bool), [initialInfo/351, initialInfo/351 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/402 = tokInfos/352[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/407 = Array.set(tokInfos/352, 0, [v358.supply, tokInfo/402[1], tokInfo/402[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 0, false ] ] )
  const tokInfo/409 = tokInfos'/407[0];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/414 = Array.set(tokInfos'/407, 0, [tokInfo/409[0], v358.supply, tokInfo/409[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/415 = tokInfos'/414[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/420 = Array.set(tokInfos'/414, 0, [tokInfo/415[0], tokInfo/415[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v432 = 2 * v358.amt;
  //    ^ would be 17712
  const tokInfo/433 = tokInfos'/420[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/444 = Array.set(tokInfos'/420, 0, [(tokInfo/433[0] - v432), tokInfo/433[1], tokInfo/433[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/448 = tokInfos'/444[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/459 = Array.set(tokInfos'/444, 0, [(tokInfo/448[0] - v432), tokInfo/448[1], tokInfo/448[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/468 = tokInfos'/459[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/476 = Array.set(tokInfos'/459, 0, [(tokInfo/468[0] + v432), tokInfo/468[1], tokInfo/468[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/483 = tokInfos'/476[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/491 = Array.set(tokInfos'/476, 0, [(tokInfo/483[0] + v432), tokInfo/483[1], tokInfo/483[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/493 = tokInfos'/491[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/504 = Array.set(tokInfos'/491, 0, [(tokInfo/493[0] - v358.supply), tokInfo/493[1], tokInfo/493[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/505 = tokInfos'/504[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/513 = Array.set(tokInfos'/504, 0, [tokInfo/505[0], (tokInfo/505[1] - v358.supply), tokInfo/505[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/514 = tokInfos'/513[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/525 = Array.set(tokInfos'/513, 0, [tokInfo/514[0], tokInfo/514[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/539 = tokInfos'/525[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/544 = Array.set(tokInfos'/525, 1, [UInt.max, tokInfo/539[1], tokInfo/539[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 0, false ] ] )
  const tokInfo/548 = tokInfos'/544[1];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/553 = Array.set(tokInfos'/544, 1, [tokInfo/548[0], UInt.max, tokInfo/548[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/554 = tokInfos'/553[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/559 = Array.set(tokInfos'/553, 1, [tokInfo/554[0], tokInfo/554[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/569 = tokInfos'/559[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/580 = Array.set(tokInfos'/559, 1, [(tokInfo/569[0] - v432), tokInfo/569[1], tokInfo/569[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [17712, 35424, false ] ] )
  const tokInfo/584 = tokInfos'/580[1];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/595 = Array.set(tokInfos'/580, 1, [(tokInfo/584[0] - v432), tokInfo/584[1], tokInfo/584[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/599 = tokInfos'/595[1];
  //    ^ would be [0, 35424, false ]
  const v600 = tokInfo/599[0];
  //    ^ would be 0
  const tokInfos'/612 = Array.set(tokInfos'/595, 1, [(v600 - v600), tokInfo/599[1], tokInfo/599[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/613 = tokInfos'/612[1];
  //    ^ would be [0, 35424, false ]
  const v627 = 0 == Array.set(tokInfos'/612, 1, [tokInfo/613[0], (tokInfo/613[1] - v600), tokInfo/613[2] ] )[1][1];
  //    ^ would be false
  assert(v627);

  Verifying when NO participants are honest
Checked 54 theorems; 2 failures (and 1 omitted repeats) :'(
