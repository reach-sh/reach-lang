Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail2.rsh:77:15:application

  // Violation Witness

  const UInt.max = 35424;

  const v347 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 8856, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 35424, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail2.rsh:24:104:application

  // Theorem Formalization

  const v340 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const v341 = array(Tuple(UInt, UInt, Bool), [v340, v340 ]);
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const v383 = v341[0];
  //    ^ would be [0, 0, false ]
  const v388 = Array.set(v341, 0, [v347.supply, v383[1], v383[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 0, false ] ] )
  const v390 = v388[0];
  //    ^ would be [35424, 0, false ]
  const v395 = Array.set(v388, 0, [v390[0], v347.supply, v390[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v396 = v395[0];
  //    ^ would be [35424, 35424, false ]
  const v401 = Array.set(v395, 0, [v396[0], v396[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v413 = 2 * v347.amt;
  //    ^ would be 17712
  const v414 = v401[0];
  //    ^ would be [35424, 35424, false ]
  const v425 = Array.set(v401, 0, [(v414[0] - v413), v414[1], v414[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const v429 = v425[0];
  //    ^ would be [17712, 35424, false ]
  const v440 = Array.set(v425, 0, [(v429[0] - v413), v429[1], v429[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const v449 = v440[0];
  //    ^ would be [0, 35424, false ]
  const v457 = Array.set(v440, 0, [(v449[0] + v413), v449[1], v449[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const v464 = v457[0];
  //    ^ would be [17712, 35424, false ]
  const v472 = Array.set(v457, 0, [(v464[0] + v413), v464[1], v464[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v474 = v472[0];
  //    ^ would be [35424, 35424, false ]
  const v485 = Array.set(v472, 0, [(v474[0] - v347.supply), v474[1], v474[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const v486 = v485[0];
  //    ^ would be [0, 35424, false ]
  const v494 = Array.set(v485, 0, [v486[0], (v486[1] - v347.supply), v486[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const v495 = v494[0];
  //    ^ would be [0, 0, false ]
  const v506 = Array.set(v494, 0, [v495[0], v495[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const v519 = v506[1];
  //    ^ would be [0, 0, false ]
  const v524 = Array.set(v506, 1, [UInt.max, v519[1], v519[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 0, false ] ] )
  const v526 = v524[1];
  //    ^ would be [35424, 0, false ]
  const v531 = Array.set(v524, 1, [v526[0], UInt.max, v526[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const v532 = v531[1];
  //    ^ would be [35424, 35424, false ]
  const v537 = Array.set(v531, 1, [v532[0], v532[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const v547 = v537[1];
  //    ^ would be [35424, 35424, false ]
  const v558 = Array.set(v537, 1, [(v547[0] - v413), v547[1], v547[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [17712, 35424, false ] ] )
  const v562 = v558[1];
  //    ^ would be [17712, 35424, false ]
  const v573 = Array.set(v558, 1, [(v562[0] - v413), v562[1], v562[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const v577 = v573[1];
  //    ^ would be [0, 35424, false ]
  const v578 = v577[0];
  //    ^ would be 0
  const v590 = Array.set(v573, 1, [(v578 - v578), v577[1], v577[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const v591 = v590[1];
  //    ^ would be [0, 35424, false ]
  const v605 = 0 == Array.set(v590, 1, [v591[0], (v591[1] - v578), v591[2] ] )[1][1];
  //    ^ would be false
  assert(v605);

  Verifying when NO participants are honest
Checked 52 theorems; 2 failures (and 1 omitted repeats) :'(
