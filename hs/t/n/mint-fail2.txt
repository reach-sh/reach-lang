Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail2.rsh:77:15:application

  // Violation Witness

  const UInt.max = 35424;

  const v356 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 8856, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 35424, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail2.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/349 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/350 = array(Tuple(UInt, UInt, Bool), [initialInfo/349, initialInfo/349 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/400 = tokInfos/350[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/405 = Array.set(tokInfos/350, 0, [v356.supply, tokInfo/400[1], tokInfo/400[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 0, false ] ] )
  const tokInfo/407 = tokInfos'/405[0];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/412 = Array.set(tokInfos'/405, 0, [tokInfo/407[0], v356.supply, tokInfo/407[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/413 = tokInfos'/412[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/418 = Array.set(tokInfos'/412, 0, [tokInfo/413[0], tokInfo/413[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v430 = 2 * v356.amt;
  //    ^ would be 17712
  const tokInfo/431 = tokInfos'/418[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/442 = Array.set(tokInfos'/418, 0, [(tokInfo/431[0] - v430), tokInfo/431[1], tokInfo/431[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/446 = tokInfos'/442[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/457 = Array.set(tokInfos'/442, 0, [(tokInfo/446[0] - v430), tokInfo/446[1], tokInfo/446[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/466 = tokInfos'/457[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/474 = Array.set(tokInfos'/457, 0, [(tokInfo/466[0] + v430), tokInfo/466[1], tokInfo/466[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/481 = tokInfos'/474[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/489 = Array.set(tokInfos'/474, 0, [(tokInfo/481[0] + v430), tokInfo/481[1], tokInfo/481[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/491 = tokInfos'/489[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/502 = Array.set(tokInfos'/489, 0, [(tokInfo/491[0] - v356.supply), tokInfo/491[1], tokInfo/491[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/503 = tokInfos'/502[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/511 = Array.set(tokInfos'/502, 0, [tokInfo/503[0], (tokInfo/503[1] - v356.supply), tokInfo/503[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/512 = tokInfos'/511[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/523 = Array.set(tokInfos'/511, 0, [tokInfo/512[0], tokInfo/512[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/537 = tokInfos'/523[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/542 = Array.set(tokInfos'/523, 1, [UInt.max, tokInfo/537[1], tokInfo/537[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 0, false ] ] )
  const tokInfo/544 = tokInfos'/542[1];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/549 = Array.set(tokInfos'/542, 1, [tokInfo/544[0], UInt.max, tokInfo/544[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/550 = tokInfos'/549[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/555 = Array.set(tokInfos'/549, 1, [tokInfo/550[0], tokInfo/550[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/565 = tokInfos'/555[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/576 = Array.set(tokInfos'/555, 1, [(tokInfo/565[0] - v430), tokInfo/565[1], tokInfo/565[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [17712, 35424, false ] ] )
  const tokInfo/580 = tokInfos'/576[1];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/591 = Array.set(tokInfos'/576, 1, [(tokInfo/580[0] - v430), tokInfo/580[1], tokInfo/580[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/595 = tokInfos'/591[1];
  //    ^ would be [0, 35424, false ]
  const v596 = tokInfo/595[0];
  //    ^ would be 0
  const tokInfos'/608 = Array.set(tokInfos'/591, 1, [(v596 - v596), tokInfo/595[1], tokInfo/595[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/609 = tokInfos'/608[1];
  //    ^ would be [0, 35424, false ]
  const v623 = 0 == Array.set(tokInfos'/608, 1, [tokInfo/609[0], (tokInfo/609[1] - v596), tokInfo/609[2] ] )[1][1];
  //    ^ would be false
  assert(v623);

  Verifying when NO participants are honest
Checked 52 theorems; 2 failures (and 1 omitted repeats) :'(
