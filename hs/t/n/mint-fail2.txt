Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail2.rsh:77:15:application

  // Violation Witness

  const UInt.max = 35424;

  const v372 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 8856, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 35424, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail2.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/365 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/366 = array(Tuple(UInt, UInt, Bool), [initialInfo/365, initialInfo/365 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/416 = tokInfos/366[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/421 = Array.set(tokInfos/366, 0, [v372.supply, tokInfo/416[1], tokInfo/416[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 0, false ] ] )
  const tokInfo/423 = tokInfos'/421[0];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/428 = Array.set(tokInfos'/421, 0, [tokInfo/423[0], v372.supply, tokInfo/423[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/429 = tokInfos'/428[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/434 = Array.set(tokInfos'/428, 0, [tokInfo/429[0], tokInfo/429[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v446 = 2 * v372.amt;
  //    ^ would be 17712
  const tokInfo/447 = tokInfos'/434[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/460 = Array.set(tokInfos'/434, 0, [(tokInfo/447[0] - v446), tokInfo/447[1], tokInfo/447[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/464 = tokInfos'/460[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/477 = Array.set(tokInfos'/460, 0, [(tokInfo/464[0] - v446), tokInfo/464[1], tokInfo/464[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/486 = tokInfos'/477[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/496 = Array.set(tokInfos'/477, 0, [(tokInfo/486[0] + v446), tokInfo/486[1], tokInfo/486[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/503 = tokInfos'/496[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/513 = Array.set(tokInfos'/496, 0, [(tokInfo/503[0] + v446), tokInfo/503[1], tokInfo/503[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/515 = tokInfos'/513[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/528 = Array.set(tokInfos'/513, 0, [(tokInfo/515[0] - v372.supply), tokInfo/515[1], tokInfo/515[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/529 = tokInfos'/528[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/537 = Array.set(tokInfos'/528, 0, [tokInfo/529[0], (tokInfo/529[1] - v372.supply), tokInfo/529[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/538 = tokInfos'/537[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/549 = Array.set(tokInfos'/537, 0, [tokInfo/538[0], tokInfo/538[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/563 = tokInfos'/549[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/568 = Array.set(tokInfos'/549, 1, [UInt.max, tokInfo/563[1], tokInfo/563[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 0, false ] ] )
  const tokInfo/570 = tokInfos'/568[1];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/575 = Array.set(tokInfos'/568, 1, [tokInfo/570[0], UInt.max, tokInfo/570[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/576 = tokInfos'/575[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/581 = Array.set(tokInfos'/575, 1, [tokInfo/576[0], tokInfo/576[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/591 = tokInfos'/581[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/604 = Array.set(tokInfos'/581, 1, [(tokInfo/591[0] - v446), tokInfo/591[1], tokInfo/591[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [17712, 35424, false ] ] )
  const tokInfo/608 = tokInfos'/604[1];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/621 = Array.set(tokInfos'/604, 1, [(tokInfo/608[0] - v446), tokInfo/608[1], tokInfo/608[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/625 = tokInfos'/621[1];
  //    ^ would be [0, 35424, false ]
  const v626 = tokInfo/625[0];
  //    ^ would be 0
  const tokInfos'/640 = Array.set(tokInfos'/621, 1, [(v626 - v626), tokInfo/625[1], tokInfo/625[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/641 = tokInfos'/640[1];
  //    ^ would be [0, 35424, false ]
  const v655 = 0 == Array.set(tokInfos'/640, 1, [tokInfo/641[0], (tokInfo/641[1] - v626), tokInfo/641[2] ] )[1][1];
  //    ^ would be false
  assert(v655);

  Verifying when NO participants are honest
Checked 52 theorems; 2 failures (and 1 omitted repeats) :'(
