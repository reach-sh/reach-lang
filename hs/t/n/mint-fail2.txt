Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail2.rsh:77:15:application

  // Violation Witness

  const UInt.max = 35424;

  const v349 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 8856, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 35424, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail2.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/342 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/343 = array(Tuple(UInt, UInt, Bool), [initialInfo/342, initialInfo/342 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/386 = tokInfos/343[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/391 = Array.set(tokInfos/343, 0, [v349.supply, tokInfo/386[1], tokInfo/386[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 0, false ] ] )
  const tokInfo/393 = tokInfos'/391[0];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/398 = Array.set(tokInfos'/391, 0, [tokInfo/393[0], v349.supply, tokInfo/393[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/399 = tokInfos'/398[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/404 = Array.set(tokInfos'/398, 0, [tokInfo/399[0], tokInfo/399[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v416 = 2 * v349.amt;
  //    ^ would be 17712
  const tokInfo/417 = tokInfos'/404[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/428 = Array.set(tokInfos'/404, 0, [(tokInfo/417[0] - v416), tokInfo/417[1], tokInfo/417[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/432 = tokInfos'/428[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/443 = Array.set(tokInfos'/428, 0, [(tokInfo/432[0] - v416), tokInfo/432[1], tokInfo/432[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/452 = tokInfos'/443[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/460 = Array.set(tokInfos'/443, 0, [(tokInfo/452[0] + v416), tokInfo/452[1], tokInfo/452[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/467 = tokInfos'/460[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/475 = Array.set(tokInfos'/460, 0, [(tokInfo/467[0] + v416), tokInfo/467[1], tokInfo/467[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/477 = tokInfos'/475[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/488 = Array.set(tokInfos'/475, 0, [(tokInfo/477[0] - v349.supply), tokInfo/477[1], tokInfo/477[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/489 = tokInfos'/488[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/497 = Array.set(tokInfos'/488, 0, [tokInfo/489[0], (tokInfo/489[1] - v349.supply), tokInfo/489[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/498 = tokInfos'/497[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/509 = Array.set(tokInfos'/497, 0, [tokInfo/498[0], tokInfo/498[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/523 = tokInfos'/509[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/528 = Array.set(tokInfos'/509, 1, [UInt.max, tokInfo/523[1], tokInfo/523[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 0, false ] ] )
  const tokInfo/530 = tokInfos'/528[1];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/535 = Array.set(tokInfos'/528, 1, [tokInfo/530[0], UInt.max, tokInfo/530[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/536 = tokInfos'/535[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/541 = Array.set(tokInfos'/535, 1, [tokInfo/536[0], tokInfo/536[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/551 = tokInfos'/541[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/562 = Array.set(tokInfos'/541, 1, [(tokInfo/551[0] - v416), tokInfo/551[1], tokInfo/551[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [17712, 35424, false ] ] )
  const tokInfo/566 = tokInfos'/562[1];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/577 = Array.set(tokInfos'/562, 1, [(tokInfo/566[0] - v416), tokInfo/566[1], tokInfo/566[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/581 = tokInfos'/577[1];
  //    ^ would be [0, 35424, false ]
  const v582 = tokInfo/581[0];
  //    ^ would be 0
  const tokInfos'/594 = Array.set(tokInfos'/577, 1, [(v582 - v582), tokInfo/581[1], tokInfo/581[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/595 = tokInfos'/594[1];
  //    ^ would be [0, 35424, false ]
  const v609 = 0 == Array.set(tokInfos'/594, 1, [tokInfo/595[0], (tokInfo/595[1] - v582), tokInfo/595[2] ] )[1][1];
  //    ^ would be false
  assert(v609);

  Verifying when NO participants are honest
Checked 52 theorems; 2 failures (and 1 omitted repeats) :'(
