Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token supply zero at Token.destroy"
  at ./mint-fail2.rsh:77:15:application

  // Violation Witness

  const UInt.max = 35424;

  const v360 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 8856, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 35424, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail2.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/353 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/354 = array(Tuple(UInt, UInt, Bool), [initialInfo/353, initialInfo/353 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/404 = tokInfos/354[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/409 = Array.set(tokInfos/354, 0, [v360.supply, tokInfo/404[1], tokInfo/404[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 0, false ] ] )
  const tokInfo/411 = tokInfos'/409[0];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/416 = Array.set(tokInfos'/409, 0, [tokInfo/411[0], v360.supply, tokInfo/411[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/417 = tokInfos'/416[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/422 = Array.set(tokInfos'/416, 0, [tokInfo/417[0], tokInfo/417[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const v434 = 2 * v360.amt;
  //    ^ would be 17712
  const tokInfo/435 = tokInfos'/422[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/446 = Array.set(tokInfos'/422, 0, [(tokInfo/435[0] - v434), tokInfo/435[1], tokInfo/435[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/450 = tokInfos'/446[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/461 = Array.set(tokInfos'/446, 0, [(tokInfo/450[0] - v434), tokInfo/450[1], tokInfo/450[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/470 = tokInfos'/461[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/480 = Array.set(tokInfos'/461, 0, [(tokInfo/470[0] + v434), tokInfo/470[1], tokInfo/470[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[17712, 35424, false ] ] )
  const tokInfo/487 = tokInfos'/480[0];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/497 = Array.set(tokInfos'/480, 0, [(tokInfo/487[0] + v434), tokInfo/487[1], tokInfo/487[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[35424, 35424, false ] ] )
  const tokInfo/499 = tokInfos'/497[0];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/510 = Array.set(tokInfos'/497, 0, [(tokInfo/499[0] - v360.supply), tokInfo/499[1], tokInfo/499[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 35424, false ] ] )
  const tokInfo/511 = tokInfos'/510[0];
  //    ^ would be [0, 35424, false ]
  const tokInfos'/519 = Array.set(tokInfos'/510, 0, [tokInfo/511[0], (tokInfo/511[1] - v360.supply), tokInfo/511[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/520 = tokInfos'/519[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/531 = Array.set(tokInfos'/519, 0, [tokInfo/520[0], tokInfo/520[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/545 = tokInfos'/531[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/550 = Array.set(tokInfos'/531, 1, [UInt.max, tokInfo/545[1], tokInfo/545[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 0, false ] ] )
  const tokInfo/552 = tokInfos'/550[1];
  //    ^ would be [35424, 0, false ]
  const tokInfos'/557 = Array.set(tokInfos'/550, 1, [tokInfo/552[0], UInt.max, tokInfo/552[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/558 = tokInfos'/557[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/563 = Array.set(tokInfos'/557, 1, [tokInfo/558[0], tokInfo/558[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [35424, 35424, false ] ] )
  const tokInfo/573 = tokInfos'/563[1];
  //    ^ would be [35424, 35424, false ]
  const tokInfos'/584 = Array.set(tokInfos'/563, 1, [(tokInfo/573[0] - v434), tokInfo/573[1], tokInfo/573[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [17712, 35424, false ] ] )
  const tokInfo/588 = tokInfos'/584[1];
  //    ^ would be [17712, 35424, false ]
  const tokInfos'/599 = Array.set(tokInfos'/584, 1, [(tokInfo/588[0] - v434), tokInfo/588[1], tokInfo/588[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/603 = tokInfos'/599[1];
  //    ^ would be [0, 35424, false ]
  const v604 = tokInfo/603[0];
  //    ^ would be 0
  const tokInfos'/616 = Array.set(tokInfos'/599, 1, [(v604 - v604), tokInfo/603[1], tokInfo/603[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 35424, false ] ] )
  const tokInfo/617 = tokInfos'/616[1];
  //    ^ would be [0, 35424, false ]
  const v631 = 0 == Array.set(tokInfos'/616, 1, [tokInfo/617[0], (tokInfo/617[1] - v604), tokInfo/617[2] ] )[1][1];
  //    ^ would be false
  assert(v631);

  Verifying when NO participants are honest
Checked 52 theorems; 2 failures (and 1 omitted repeats) :'(
