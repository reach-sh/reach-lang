Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "balance zero at application exit"
  at ./pr417.rsh:30:7:application

  // Violation Witness

  const UInt.max = 20;

  const data_id/316 = <switch case binding for T(10 )>;
  //    ^ could = 10
  //      from: ./pr417.rsh:18:12:switch

  // Theorem Formalization

  const v387 = 0 == ((10 + data_id/316) - 10);
  //    ^ would be false
  assert(v387);

  Verifying when NO participants are honest
Verification failed:
  when NO participants are honest
  of theorem: assert
  msg: "balance zero at application exit"
  at ./pr417.rsh:30:7:application

  // Violation Witness

  const UInt.max = 20;


  // Theorem Formalization

  const v312 = 0 == ((10 + 10) - 10);
  //    ^ would be false
  assert(v312);

Verification failed:
  when NO participants are honest
  of theorem: assert
  msg: "balance zero at application exit"
  at ./pr417.rsh:30:7:application

  // Violation Witness

  const UInt.max = 20;

  const tok/205 = v201;
  //    ^ could = Token!val!2
  //      from: ./pr417.rsh:10:5:dot

  // Theorem Formalization

  const tokInfos/197 = array(Tuple(UInt, UInt, Bool), [[0, 0, false ] ]);
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/208 = tokInfos/197[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/213 = Array.set(tokInfos/197, 0, [0, tokInfo/208[1], tokInfo/208[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/220 = tokInfos'/213[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/228 = Array.set(tokInfos'/213, 0, [(tokInfo/220[0] + 10), tokInfo/220[1], tokInfo/220[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[10, 0, false ] ] )
  const tokIdx/340 = ((Array.set(array(Token, [Token.zero ]), 0, tok/205 )[0] == tok/205) ? [true, 0 ] : [false, 1 ])[1];
  //    ^ would be 0
  const tokInfo/342 = tokInfos'/228[tokIdx/340];
  //    ^ would be [10, 0, false ]
  const tokInfos'/364 = Array.set(tokInfos'/228, tokIdx/340, [(tokInfo/342[0] + 10), tokInfo/342[1], tokInfo/342[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[20, 0, false ] ] )
  const tokInfo/374 = tokInfos'/364[0];
  //    ^ would be [20, 0, false ]
  const v390 = 0 == Array.set(tokInfos'/364, 0, [(tokInfo/374[0] - 10), tokInfo/374[1], tokInfo/374[2] ] )[0][0];
  //    ^ would be false
  assert(v390);

Checked 41 theorems; 4 failures (and 1 omitted repeats) :'(
