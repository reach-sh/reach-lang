Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "balance zero at application exit"
  at ./pr417.rsh:30:7:application

  // Violation Witness

  const UInt.max = 20;

  const data_id/338 = <switch case binding for T(10 )>;
  //    ^ could = 10
  //      from: ./pr417.rsh:18:12:switch

  // Theorem Formalization

  const v415 = 0 == ((10 + data_id/338) - 10);
  //    ^ would be false
  assert(v415);

  Verifying when NO participants are honest
Verification failed:
  when NO participants are honest
  of theorem: assert
  msg: "balance zero at application exit"
  at ./pr417.rsh:30:7:application

  // Violation Witness

  const UInt.max = 20;


  // Theorem Formalization

  const v334 = 0 == ((10 + 10) - 10);
  //    ^ would be false
  assert(v334);

Verification failed:
  when NO participants are honest
  of theorem: assert
  msg: "balance zero at application exit"
  at ./pr417.rsh:30:7:application

  // Violation Witness

  const UInt.max = 20;

  const tok/217 = <a publication>;
  //    ^ could = Token!val!2
  //      from: ./pr417.rsh:10:5:dot

  // Theorem Formalization

  const tokInfos/209 = array(Tuple(UInt, UInt, Bool), [[0, 0, false ] ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/220 = tokInfos/209[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/225 = Array.set(tokInfos/209, 0, [0, tokInfo/220[1], tokInfo/220[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/234 = tokInfos'/225[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/244 = Array.set(tokInfos'/225, 0, [(tokInfo/234[0] + 10), tokInfo/234[1], tokInfo/234[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[10, 0, false ] ] )
  const tokIdx/365 = ((Array.set(array(Token, [Token.zero ]), 0, tok/217 )[0] == tok/217) ? [true, 0 ] : [false, 1 ])[1];
  //    ^ would be 0
  const tokInfo/367 = tokInfos'/244[tokIdx/365];
  //    ^ would be [10, 0, false ]
  const tokInfos'/392 = Array.set(tokInfos'/244, tokIdx/365, [(tokInfo/367[0] + 10), tokInfo/367[1], tokInfo/367[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[20, 0, false ] ] )
  const tokInfo/402 = tokInfos'/392[0];
  //    ^ would be [20, 0, false ]
  const v418 = 0 == Array.set(tokInfos'/392, 0, [(tokInfo/402[0] - 10), tokInfo/402[1], tokInfo/402[2] ] )[0][0];
  //    ^ would be false
  assert(v418);

Checked 41 theorems; 4 failures (and 1 omitted repeats) :'(
