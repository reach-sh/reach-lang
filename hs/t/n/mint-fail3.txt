Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token destroyed at application exit"
  at ./mint-fail3.rsh:83:7:application

  // Violation Witness

  const v356 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 0, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail3.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/349 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/350 = array(Tuple(UInt, UInt, Bool), [initialInfo/349, initialInfo/349 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/400 = tokInfos/350[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/405 = Array.set(tokInfos/350, 0, [v356.supply, tokInfo/400[1], tokInfo/400[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/407 = tokInfos'/405[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/412 = Array.set(tokInfos'/405, 0, [tokInfo/407[0], v356.supply, tokInfo/407[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/413 = tokInfos'/412[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/418 = Array.set(tokInfos'/412, 0, [tokInfo/413[0], tokInfo/413[1], false ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const v430 = 2 * v356.amt;
  //    ^ would be 0
  const tokInfo/431 = tokInfos'/418[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/442 = Array.set(tokInfos'/418, 0, [(tokInfo/431[0] - v430), tokInfo/431[1], tokInfo/431[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/450 = tokInfos'/442[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/461 = Array.set(tokInfos'/442, 0, [(tokInfo/450[0] - v430), tokInfo/450[1], tokInfo/450[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/469 = tokInfos'/461[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/479 = Array.set(tokInfos'/461, 0, [(tokInfo/469[0] + v430), tokInfo/469[1], tokInfo/469[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/486 = tokInfos'/479[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/496 = Array.set(tokInfos'/479, 0, [(tokInfo/486[0] + v430), tokInfo/486[1], tokInfo/486[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/498 = tokInfos'/496[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/509 = Array.set(tokInfos'/496, 0, [(tokInfo/498[0] - v356.supply), tokInfo/498[1], tokInfo/498[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/510 = tokInfos'/509[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/518 = Array.set(tokInfos'/509, 0, [tokInfo/510[0], (tokInfo/510[1] - v356.supply), tokInfo/510[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/519 = tokInfos'/518[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/530 = Array.set(tokInfos'/518, 0, [tokInfo/519[0], tokInfo/519[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/544 = tokInfos'/530[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/549 = Array.set(tokInfos'/530, 1, [UInt.max, tokInfo/544[1], tokInfo/544[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/551 = tokInfos'/549[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/556 = Array.set(tokInfos'/549, 1, [tokInfo/551[0], UInt.max, tokInfo/551[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/557 = tokInfos'/556[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/562 = Array.set(tokInfos'/556, 1, [tokInfo/557[0], tokInfo/557[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/572 = tokInfos'/562[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/583 = Array.set(tokInfos'/562, 1, [(tokInfo/572[0] - v430), tokInfo/572[1], tokInfo/572[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/591 = tokInfos'/583[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/602 = Array.set(tokInfos'/583, 1, [(tokInfo/591[0] - v430), tokInfo/591[1], tokInfo/591[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/605 = tokInfos'/602[1];
  //    ^ would be [0, 0, false ]
  const v606 = tokInfo/605[0];
  //    ^ would be 0
  const tokInfos'/618 = Array.set(tokInfos'/602, 1, [(v606 - v606), tokInfo/605[1], tokInfo/605[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/619 = tokInfos'/618[1];
  //    ^ would be [0, 0, false ]
  const v640 = Array.set(tokInfos'/618, 1, [tokInfo/619[0], (tokInfo/619[1] - v606), tokInfo/619[2] ] )[1][2];
  //    ^ would be false
  assert(v640);

  Verifying when NO participants are honest
Checked 54 theorems; 2 failures (and 1 omitted repeats) :'(
