Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token destroyed at application exit"
  at ./mint-fail3.rsh:83:7:application

  // Violation Witness

  const v352 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 0, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail3.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/345 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/346 = array(Tuple(UInt, UInt, Bool), [initialInfo/345, initialInfo/345 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/396 = tokInfos/346[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/401 = Array.set(tokInfos/346, 0, [v352.supply, tokInfo/396[1], tokInfo/396[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/403 = tokInfos'/401[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/408 = Array.set(tokInfos'/401, 0, [tokInfo/403[0], v352.supply, tokInfo/403[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/409 = tokInfos'/408[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/414 = Array.set(tokInfos'/408, 0, [tokInfo/409[0], tokInfo/409[1], false ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const v426 = 2 * v352.amt;
  //    ^ would be 0
  const tokInfo/427 = tokInfos'/414[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/438 = Array.set(tokInfos'/414, 0, [(tokInfo/427[0] - v426), tokInfo/427[1], tokInfo/427[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/446 = tokInfos'/438[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/457 = Array.set(tokInfos'/438, 0, [(tokInfo/446[0] - v426), tokInfo/446[1], tokInfo/446[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/465 = tokInfos'/457[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/473 = Array.set(tokInfos'/457, 0, [(tokInfo/465[0] + v426), tokInfo/465[1], tokInfo/465[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/480 = tokInfos'/473[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/488 = Array.set(tokInfos'/473, 0, [(tokInfo/480[0] + v426), tokInfo/480[1], tokInfo/480[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/490 = tokInfos'/488[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/501 = Array.set(tokInfos'/488, 0, [(tokInfo/490[0] - v352.supply), tokInfo/490[1], tokInfo/490[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/502 = tokInfos'/501[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/510 = Array.set(tokInfos'/501, 0, [tokInfo/502[0], (tokInfo/502[1] - v352.supply), tokInfo/502[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/511 = tokInfos'/510[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/522 = Array.set(tokInfos'/510, 0, [tokInfo/511[0], tokInfo/511[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/536 = tokInfos'/522[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/541 = Array.set(tokInfos'/522, 1, [UInt.max, tokInfo/536[1], tokInfo/536[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/543 = tokInfos'/541[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/548 = Array.set(tokInfos'/541, 1, [tokInfo/543[0], UInt.max, tokInfo/543[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/549 = tokInfos'/548[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/554 = Array.set(tokInfos'/548, 1, [tokInfo/549[0], tokInfo/549[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/564 = tokInfos'/554[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/575 = Array.set(tokInfos'/554, 1, [(tokInfo/564[0] - v426), tokInfo/564[1], tokInfo/564[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/583 = tokInfos'/575[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/594 = Array.set(tokInfos'/575, 1, [(tokInfo/583[0] - v426), tokInfo/583[1], tokInfo/583[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/597 = tokInfos'/594[1];
  //    ^ would be [0, 0, false ]
  const v598 = tokInfo/597[0];
  //    ^ would be 0
  const tokInfos'/610 = Array.set(tokInfos'/594, 1, [(v598 - v598), tokInfo/597[1], tokInfo/597[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/611 = tokInfos'/610[1];
  //    ^ would be [0, 0, false ]
  const v632 = Array.set(tokInfos'/610, 1, [tokInfo/611[0], (tokInfo/611[1] - v598), tokInfo/611[2] ] )[1][2];
  //    ^ would be false
  assert(v632);

  Verifying when NO participants are honest
Checked 54 theorems; 2 failures (and 1 omitted repeats) :'(
