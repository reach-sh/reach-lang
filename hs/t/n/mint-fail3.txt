Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token destroyed at application exit"
  at ./mint-fail3.rsh:83:7:application

  // Violation Witness

  const v343 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 0, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail3.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/336 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/337 = array(Tuple(UInt, UInt, Bool), [initialInfo/336, initialInfo/336 ]);
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/379 = tokInfos/337[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/384 = Array.set(tokInfos/337, 0, [v343.supply, tokInfo/379[1], tokInfo/379[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/386 = tokInfos'/384[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/391 = Array.set(tokInfos'/384, 0, [tokInfo/386[0], v343.supply, tokInfo/386[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/392 = tokInfos'/391[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/397 = Array.set(tokInfos'/391, 0, [tokInfo/392[0], tokInfo/392[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const v409 = 2 * v343.amt;
  //    ^ would be 0
  const tokInfo/410 = tokInfos'/397[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/421 = Array.set(tokInfos'/397, 0, [(tokInfo/410[0] - v409), tokInfo/410[1], tokInfo/410[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/429 = tokInfos'/421[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/440 = Array.set(tokInfos'/421, 0, [(tokInfo/429[0] - v409), tokInfo/429[1], tokInfo/429[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/448 = tokInfos'/440[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/456 = Array.set(tokInfos'/440, 0, [(tokInfo/448[0] + v409), tokInfo/448[1], tokInfo/448[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/463 = tokInfos'/456[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/471 = Array.set(tokInfos'/456, 0, [(tokInfo/463[0] + v409), tokInfo/463[1], tokInfo/463[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/473 = tokInfos'/471[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/484 = Array.set(tokInfos'/471, 0, [(tokInfo/473[0] - v343.supply), tokInfo/473[1], tokInfo/473[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/485 = tokInfos'/484[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/493 = Array.set(tokInfos'/484, 0, [tokInfo/485[0], (tokInfo/485[1] - v343.supply), tokInfo/485[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [] )
  const tokInfo/494 = tokInfos'/493[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/505 = Array.set(tokInfos'/493, 0, [tokInfo/494[0], tokInfo/494[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/518 = tokInfos'/505[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/523 = Array.set(tokInfos'/505, 1, [UInt.max, tokInfo/518[1], tokInfo/518[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/525 = tokInfos'/523[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/530 = Array.set(tokInfos'/523, 1, [tokInfo/525[0], UInt.max, tokInfo/525[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/531 = tokInfos'/530[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/536 = Array.set(tokInfos'/530, 1, [tokInfo/531[0], tokInfo/531[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/546 = tokInfos'/536[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/557 = Array.set(tokInfos'/536, 1, [(tokInfo/546[0] - v409), tokInfo/546[1], tokInfo/546[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/565 = tokInfos'/557[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/576 = Array.set(tokInfos'/557, 1, [(tokInfo/565[0] - v409), tokInfo/565[1], tokInfo/565[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/579 = tokInfos'/576[1];
  //    ^ would be [0, 0, false ]
  const v580 = tokInfo/579[0];
  //    ^ would be 0
  const tokInfos'/592 = Array.set(tokInfos'/576, 1, [(v580 - v580), tokInfo/579[1], tokInfo/579[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/593 = tokInfos'/592[1];
  //    ^ would be [0, 0, false ]
  const v614 = Array.set(tokInfos'/592, 1, [tokInfo/593[0], (tokInfo/593[1] - v580), tokInfo/593[2] ] )[1][2];
  //    ^ would be false
  assert(v614);

  Verifying when NO participants are honest
Checked 54 theorems; 2 failures (and 1 omitted repeats) :'(
