Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token destroyed at application exit"
  at ./mint-fail3.rsh:83:7:application

  // Violation Witness

  const v368 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 0, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail3.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/361 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/362 = array(Tuple(UInt, UInt, Bool), [initialInfo/361, initialInfo/361 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/412 = tokInfos/362[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/417 = Array.set(tokInfos/362, 0, [v368.supply, tokInfo/412[1], tokInfo/412[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/419 = tokInfos'/417[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/424 = Array.set(tokInfos'/417, 0, [tokInfo/419[0], v368.supply, tokInfo/419[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/425 = tokInfos'/424[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/430 = Array.set(tokInfos'/424, 0, [tokInfo/425[0], tokInfo/425[1], false ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const v442 = 2 * v368.amt;
  //    ^ would be 0
  const tokInfo/443 = tokInfos'/430[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/456 = Array.set(tokInfos'/430, 0, [(tokInfo/443[0] - v442), tokInfo/443[1], tokInfo/443[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/464 = tokInfos'/456[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/477 = Array.set(tokInfos'/456, 0, [(tokInfo/464[0] - v442), tokInfo/464[1], tokInfo/464[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/485 = tokInfos'/477[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/495 = Array.set(tokInfos'/477, 0, [(tokInfo/485[0] + v442), tokInfo/485[1], tokInfo/485[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/502 = tokInfos'/495[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/512 = Array.set(tokInfos'/495, 0, [(tokInfo/502[0] + v442), tokInfo/502[1], tokInfo/502[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/514 = tokInfos'/512[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/527 = Array.set(tokInfos'/512, 0, [(tokInfo/514[0] - v368.supply), tokInfo/514[1], tokInfo/514[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/528 = tokInfos'/527[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/536 = Array.set(tokInfos'/527, 0, [tokInfo/528[0], (tokInfo/528[1] - v368.supply), tokInfo/528[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/537 = tokInfos'/536[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/548 = Array.set(tokInfos'/536, 0, [tokInfo/537[0], tokInfo/537[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/562 = tokInfos'/548[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/567 = Array.set(tokInfos'/548, 1, [UInt.max, tokInfo/562[1], tokInfo/562[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/569 = tokInfos'/567[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/574 = Array.set(tokInfos'/567, 1, [tokInfo/569[0], UInt.max, tokInfo/569[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/575 = tokInfos'/574[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/580 = Array.set(tokInfos'/574, 1, [tokInfo/575[0], tokInfo/575[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/590 = tokInfos'/580[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/603 = Array.set(tokInfos'/580, 1, [(tokInfo/590[0] - v442), tokInfo/590[1], tokInfo/590[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/611 = tokInfos'/603[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/624 = Array.set(tokInfos'/603, 1, [(tokInfo/611[0] - v442), tokInfo/611[1], tokInfo/611[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/627 = tokInfos'/624[1];
  //    ^ would be [0, 0, false ]
  const v628 = tokInfo/627[0];
  //    ^ would be 0
  const tokInfos'/642 = Array.set(tokInfos'/624, 1, [(v628 - v628), tokInfo/627[1], tokInfo/627[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/643 = tokInfos'/642[1];
  //    ^ would be [0, 0, false ]
  const v664 = Array.set(tokInfos'/642, 1, [tokInfo/643[0], (tokInfo/643[1] - v628), tokInfo/643[2] ] )[1][2];
  //    ^ would be false
  assert(v664);

  Verifying when NO participants are honest
Checked 54 theorems; 2 failures (and 1 omitted repeats) :'(
