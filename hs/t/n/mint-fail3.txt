Verifying knowledge assertions
Verifying for generic connector
  Verifying when ALL participants are honest
Verification failed:
  when ALL participants are honest
  of theorem: assert
  msg: "token destroyed at application exit"
  at ./mint-fail3.rsh:83:7:application

  // Violation Witness

  const v354 = protect<Object({"amt": UInt, "doEarlyTransfer": Bool, "metadata": Bytes(32), "name": Bytes(32), "supply": UInt, "symbol": Bytes(8), "url": Bytes(96)})>("Alice".interact.getParams());
  //    ^ could = {amt: 0, doEarlyTransfer: false, metadata: "Bytes!val!0", name: "Bytes!val!1", supply: 0, symbol: "Bytes!val!2", url: "Bytes!val!3" }
  //      from: ./mint-fail3.rsh:24:104:application

  // Theorem Formalization

  const initialInfo/347 = [0, 0, false ];
  //    ^ would be [0, 0, false ]
  const tokInfos/348 = array(Tuple(UInt, UInt, Bool), [initialInfo/347, initialInfo/347 ]);
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/398 = tokInfos/348[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/403 = Array.set(tokInfos/348, 0, [v354.supply, tokInfo/398[1], tokInfo/398[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/405 = tokInfos'/403[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/410 = Array.set(tokInfos'/403, 0, [tokInfo/405[0], v354.supply, tokInfo/405[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/411 = tokInfos'/410[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/416 = Array.set(tokInfos'/410, 0, [tokInfo/411[0], tokInfo/411[1], false ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const v428 = 2 * v354.amt;
  //    ^ would be 0
  const tokInfo/429 = tokInfos'/416[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/440 = Array.set(tokInfos'/416, 0, [(tokInfo/429[0] - v428), tokInfo/429[1], tokInfo/429[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/448 = tokInfos'/440[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/459 = Array.set(tokInfos'/440, 0, [(tokInfo/448[0] - v428), tokInfo/448[1], tokInfo/448[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/467 = tokInfos'/459[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/475 = Array.set(tokInfos'/459, 0, [(tokInfo/467[0] + v428), tokInfo/467[1], tokInfo/467[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/482 = tokInfos'/475[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/490 = Array.set(tokInfos'/475, 0, [(tokInfo/482[0] + v428), tokInfo/482[1], tokInfo/482[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/492 = tokInfos'/490[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/503 = Array.set(tokInfos'/490, 0, [(tokInfo/492[0] - v354.supply), tokInfo/492[1], tokInfo/492[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/504 = tokInfos'/503[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/512 = Array.set(tokInfos'/503, 0, [tokInfo/504[0], (tokInfo/504[1] - v354.supply), tokInfo/504[2] ] );
  //    ^ would be Array.const(Tuple(UInt, UInt, Bool), [0, 0, false ] )
  const tokInfo/513 = tokInfos'/512[0];
  //    ^ would be [0, 0, false ]
  const tokInfos'/524 = Array.set(tokInfos'/512, 0, [tokInfo/513[0], tokInfo/513[1], true ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ] ] )
  const tokInfo/538 = tokInfos'/524[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/543 = Array.set(tokInfos'/524, 1, [UInt.max, tokInfo/538[1], tokInfo/538[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/547 = tokInfos'/543[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/552 = Array.set(tokInfos'/543, 1, [tokInfo/547[0], UInt.max, tokInfo/547[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/553 = tokInfos'/552[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/558 = Array.set(tokInfos'/552, 1, [tokInfo/553[0], tokInfo/553[1], false ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/568 = tokInfos'/558[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/579 = Array.set(tokInfos'/558, 1, [(tokInfo/568[0] - v428), tokInfo/568[1], tokInfo/568[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/587 = tokInfos'/579[1];
  //    ^ would be [0, 0, false ]
  const tokInfos'/598 = Array.set(tokInfos'/579, 1, [(tokInfo/587[0] - v428), tokInfo/587[1], tokInfo/587[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/601 = tokInfos'/598[1];
  //    ^ would be [0, 0, false ]
  const v602 = tokInfo/601[0];
  //    ^ would be 0
  const tokInfos'/614 = Array.set(tokInfos'/598, 1, [(v602 - v602), tokInfo/601[1], tokInfo/601[2] ] );
  //    ^ would be array(Tuple(UInt, UInt, Bool), [[0, 0, true ], [0, 0, false ] ] )
  const tokInfo/615 = tokInfos'/614[1];
  //    ^ would be [0, 0, false ]
  const v636 = Array.set(tokInfos'/614, 1, [tokInfo/615[0], (tokInfo/615[1] - v602), tokInfo/615[2] ] )[1][2];
  //    ^ would be false
  assert(v636);

  Verifying when NO participants are honest
Checked 56 theorems; 2 failures (and 1 omitted repeats) :'(
